/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Grafo;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-20")
public class Thrift {

  public interface Iface extends Chord.Iface {

    public boolean addVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException;

    public Vertice readVertice(int nome) throws KeyNotFound, org.apache.thrift.TException;

    public boolean updateVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException;

    public boolean deleteVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Vertice> readAllVertice() throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Vertice> readVerticeNeighboors(Vertice v) throws KeyNotFound, org.apache.thrift.TException;

    public boolean addAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException;

    public Aresta readAresta(int nomeV1, int nomeV2) throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Aresta> readAllAresta() throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Aresta> readAllArestaOfVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException;

    public boolean updateAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException;

    public boolean deleteAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Vertice> readVerticeNode() throws KeyNotFound, org.apache.thrift.TException;

    public java.util.List<Aresta> readArestaNode() throws KeyNotFound, org.apache.thrift.TException;

    public int procuraMenorDistancia(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices) throws org.apache.thrift.TException;

    public java.util.List<Vertice> menorCaminho(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist) throws KeyNotFound, org.apache.thrift.TException;

    public void stabilizeCluster() throws KeyNotFound, org.apache.thrift.TException;

    public void setCluster(java.util.List<Finger> cluster) throws KeyNotFound, org.apache.thrift.TException;

  }

  public interface AsyncIface extends Chord .AsyncIface {

    public void addVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void readVertice(int nome, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler) throws org.apache.thrift.TException;

    public void updateVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void deleteVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void readAllVertice(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException;

    public void readVerticeNeighboors(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException;

    public void addAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void readAresta(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler) throws org.apache.thrift.TException;

    public void readAllAresta(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException;

    public void readAllArestaOfVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException;

    public void updateAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void deleteAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void readVerticeNode(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException;

    public void readArestaNode(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException;

    public void procuraMenorDistancia(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void menorCaminho(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException;

    public void stabilizeCluster(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void setCluster(java.util.List<Finger> cluster, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends Chord.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException
    {
      send_addVertice(v);
      return recv_addVertice();
    }

    public void send_addVertice(Vertice v) throws org.apache.thrift.TException
    {
      addVertice_args args = new addVertice_args();
      args.setV(v);
      sendBase("addVertice", args);
    }

    public boolean recv_addVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      addVertice_result result = new addVertice_result();
      receiveBase(result, "addVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVertice failed: unknown result");
    }

    public Vertice readVertice(int nome) throws KeyNotFound, org.apache.thrift.TException
    {
      send_readVertice(nome);
      return recv_readVertice();
    }

    public void send_readVertice(int nome) throws org.apache.thrift.TException
    {
      readVertice_args args = new readVertice_args();
      args.setNome(nome);
      sendBase("readVertice", args);
    }

    public Vertice recv_readVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      readVertice_result result = new readVertice_result();
      receiveBase(result, "readVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readVertice failed: unknown result");
    }

    public boolean updateVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException
    {
      send_updateVertice(v);
      return recv_updateVertice();
    }

    public void send_updateVertice(Vertice v) throws org.apache.thrift.TException
    {
      updateVertice_args args = new updateVertice_args();
      args.setV(v);
      sendBase("updateVertice", args);
    }

    public boolean recv_updateVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      updateVertice_result result = new updateVertice_result();
      receiveBase(result, "updateVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVertice failed: unknown result");
    }

    public boolean deleteVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException
    {
      send_deleteVertice(v);
      return recv_deleteVertice();
    }

    public void send_deleteVertice(Vertice v) throws org.apache.thrift.TException
    {
      deleteVertice_args args = new deleteVertice_args();
      args.setV(v);
      sendBase("deleteVertice", args);
    }

    public boolean recv_deleteVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      deleteVertice_result result = new deleteVertice_result();
      receiveBase(result, "deleteVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteVertice failed: unknown result");
    }

    public java.util.List<Vertice> readAllVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      send_readAllVertice();
      return recv_readAllVertice();
    }

    public void send_readAllVertice() throws org.apache.thrift.TException
    {
      readAllVertice_args args = new readAllVertice_args();
      sendBase("readAllVertice", args);
    }

    public java.util.List<Vertice> recv_readAllVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      readAllVertice_result result = new readAllVertice_result();
      receiveBase(result, "readAllVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAllVertice failed: unknown result");
    }

    public java.util.List<Vertice> readVerticeNeighboors(Vertice v) throws KeyNotFound, org.apache.thrift.TException
    {
      send_readVerticeNeighboors(v);
      return recv_readVerticeNeighboors();
    }

    public void send_readVerticeNeighboors(Vertice v) throws org.apache.thrift.TException
    {
      readVerticeNeighboors_args args = new readVerticeNeighboors_args();
      args.setV(v);
      sendBase("readVerticeNeighboors", args);
    }

    public java.util.List<Vertice> recv_readVerticeNeighboors() throws KeyNotFound, org.apache.thrift.TException
    {
      readVerticeNeighboors_result result = new readVerticeNeighboors_result();
      receiveBase(result, "readVerticeNeighboors");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readVerticeNeighboors failed: unknown result");
    }

    public boolean addAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException
    {
      send_addAresta(a);
      return recv_addAresta();
    }

    public void send_addAresta(Aresta a) throws org.apache.thrift.TException
    {
      addAresta_args args = new addAresta_args();
      args.setA(a);
      sendBase("addAresta", args);
    }

    public boolean recv_addAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      addAresta_result result = new addAresta_result();
      receiveBase(result, "addAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAresta failed: unknown result");
    }

    public Aresta readAresta(int nomeV1, int nomeV2) throws KeyNotFound, org.apache.thrift.TException
    {
      send_readAresta(nomeV1, nomeV2);
      return recv_readAresta();
    }

    public void send_readAresta(int nomeV1, int nomeV2) throws org.apache.thrift.TException
    {
      readAresta_args args = new readAresta_args();
      args.setNomeV1(nomeV1);
      args.setNomeV2(nomeV2);
      sendBase("readAresta", args);
    }

    public Aresta recv_readAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      readAresta_result result = new readAresta_result();
      receiveBase(result, "readAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAresta failed: unknown result");
    }

    public java.util.List<Aresta> readAllAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      send_readAllAresta();
      return recv_readAllAresta();
    }

    public void send_readAllAresta() throws org.apache.thrift.TException
    {
      readAllAresta_args args = new readAllAresta_args();
      sendBase("readAllAresta", args);
    }

    public java.util.List<Aresta> recv_readAllAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      readAllAresta_result result = new readAllAresta_result();
      receiveBase(result, "readAllAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAllAresta failed: unknown result");
    }

    public java.util.List<Aresta> readAllArestaOfVertice(Vertice v) throws KeyNotFound, org.apache.thrift.TException
    {
      send_readAllArestaOfVertice(v);
      return recv_readAllArestaOfVertice();
    }

    public void send_readAllArestaOfVertice(Vertice v) throws org.apache.thrift.TException
    {
      readAllArestaOfVertice_args args = new readAllArestaOfVertice_args();
      args.setV(v);
      sendBase("readAllArestaOfVertice", args);
    }

    public java.util.List<Aresta> recv_readAllArestaOfVertice() throws KeyNotFound, org.apache.thrift.TException
    {
      readAllArestaOfVertice_result result = new readAllArestaOfVertice_result();
      receiveBase(result, "readAllArestaOfVertice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAllArestaOfVertice failed: unknown result");
    }

    public boolean updateAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException
    {
      send_updateAresta(a);
      return recv_updateAresta();
    }

    public void send_updateAresta(Aresta a) throws org.apache.thrift.TException
    {
      updateAresta_args args = new updateAresta_args();
      args.setA(a);
      sendBase("updateAresta", args);
    }

    public boolean recv_updateAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      updateAresta_result result = new updateAresta_result();
      receiveBase(result, "updateAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAresta failed: unknown result");
    }

    public boolean deleteAresta(Aresta a) throws KeyNotFound, org.apache.thrift.TException
    {
      send_deleteAresta(a);
      return recv_deleteAresta();
    }

    public void send_deleteAresta(Aresta a) throws org.apache.thrift.TException
    {
      deleteAresta_args args = new deleteAresta_args();
      args.setA(a);
      sendBase("deleteAresta", args);
    }

    public boolean recv_deleteAresta() throws KeyNotFound, org.apache.thrift.TException
    {
      deleteAresta_result result = new deleteAresta_result();
      receiveBase(result, "deleteAresta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAresta failed: unknown result");
    }

    public java.util.List<Vertice> readVerticeNode() throws KeyNotFound, org.apache.thrift.TException
    {
      send_readVerticeNode();
      return recv_readVerticeNode();
    }

    public void send_readVerticeNode() throws org.apache.thrift.TException
    {
      readVerticeNode_args args = new readVerticeNode_args();
      sendBase("readVerticeNode", args);
    }

    public java.util.List<Vertice> recv_readVerticeNode() throws KeyNotFound, org.apache.thrift.TException
    {
      readVerticeNode_result result = new readVerticeNode_result();
      receiveBase(result, "readVerticeNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readVerticeNode failed: unknown result");
    }

    public java.util.List<Aresta> readArestaNode() throws KeyNotFound, org.apache.thrift.TException
    {
      send_readArestaNode();
      return recv_readArestaNode();
    }

    public void send_readArestaNode() throws org.apache.thrift.TException
    {
      readArestaNode_args args = new readArestaNode_args();
      sendBase("readArestaNode", args);
    }

    public java.util.List<Aresta> recv_readArestaNode() throws KeyNotFound, org.apache.thrift.TException
    {
      readArestaNode_result result = new readArestaNode_result();
      receiveBase(result, "readArestaNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readArestaNode failed: unknown result");
    }

    public int procuraMenorDistancia(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices) throws org.apache.thrift.TException
    {
      send_procuraMenorDistancia(dist, visitado, vertices);
      return recv_procuraMenorDistancia();
    }

    public void send_procuraMenorDistancia(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices) throws org.apache.thrift.TException
    {
      procuraMenorDistancia_args args = new procuraMenorDistancia_args();
      args.setDist(dist);
      args.setVisitado(visitado);
      args.setVertices(vertices);
      sendBase("procuraMenorDistancia", args);
    }

    public int recv_procuraMenorDistancia() throws org.apache.thrift.TException
    {
      procuraMenorDistancia_result result = new procuraMenorDistancia_result();
      receiveBase(result, "procuraMenorDistancia");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "procuraMenorDistancia failed: unknown result");
    }

    public java.util.List<Vertice> menorCaminho(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist) throws KeyNotFound, org.apache.thrift.TException
    {
      send_menorCaminho(ini, fim, ant, dist);
      return recv_menorCaminho();
    }

    public void send_menorCaminho(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist) throws org.apache.thrift.TException
    {
      menorCaminho_args args = new menorCaminho_args();
      args.setIni(ini);
      args.setFim(fim);
      args.setAnt(ant);
      args.setDist(dist);
      sendBase("menorCaminho", args);
    }

    public java.util.List<Vertice> recv_menorCaminho() throws KeyNotFound, org.apache.thrift.TException
    {
      menorCaminho_result result = new menorCaminho_result();
      receiveBase(result, "menorCaminho");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.knf != null) {
        throw result.knf;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "menorCaminho failed: unknown result");
    }

    public void stabilizeCluster() throws KeyNotFound, org.apache.thrift.TException
    {
      send_stabilizeCluster();
      recv_stabilizeCluster();
    }

    public void send_stabilizeCluster() throws org.apache.thrift.TException
    {
      stabilizeCluster_args args = new stabilizeCluster_args();
      sendBase("stabilizeCluster", args);
    }

    public void recv_stabilizeCluster() throws KeyNotFound, org.apache.thrift.TException
    {
      stabilizeCluster_result result = new stabilizeCluster_result();
      receiveBase(result, "stabilizeCluster");
      if (result.knf != null) {
        throw result.knf;
      }
      return;
    }

    public void setCluster(java.util.List<Finger> cluster) throws KeyNotFound, org.apache.thrift.TException
    {
      send_setCluster(cluster);
      recv_setCluster();
    }

    public void send_setCluster(java.util.List<Finger> cluster) throws org.apache.thrift.TException
    {
      setCluster_args args = new setCluster_args();
      args.setCluster(cluster);
      sendBase("setCluster", args);
    }

    public void recv_setCluster() throws KeyNotFound, org.apache.thrift.TException
    {
      setCluster_result result = new setCluster_result();
      receiveBase(result, "setCluster");
      if (result.knf != null) {
        throw result.knf;
      }
      return;
    }

  }
  public static class AsyncClient extends Chord.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVertice_call method_call = new addVertice_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVertice_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Vertice v;
      public addVertice_call(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVertice_args args = new addVertice_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVertice();
      }
    }

    public void readVertice(int nome, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readVertice_call method_call = new readVertice_call(nome, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readVertice_call extends org.apache.thrift.async.TAsyncMethodCall<Vertice> {
      private int nome;
      public readVertice_call(int nome, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nome = nome;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readVertice_args args = new readVertice_args();
        args.setNome(nome);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertice getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readVertice();
      }
    }

    public void updateVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVertice_call method_call = new updateVertice_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVertice_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Vertice v;
      public updateVertice_call(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVertice_args args = new updateVertice_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVertice();
      }
    }

    public void deleteVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVertice_call method_call = new deleteVertice_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVertice_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Vertice v;
      public deleteVertice_call(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVertice_args args = new deleteVertice_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteVertice();
      }
    }

    public void readAllVertice(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAllVertice_call method_call = new readAllVertice_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAllVertice_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Vertice>> {
      public readAllVertice_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAllVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAllVertice_args args = new readAllVertice_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Vertice> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAllVertice();
      }
    }

    public void readVerticeNeighboors(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readVerticeNeighboors_call method_call = new readVerticeNeighboors_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readVerticeNeighboors_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Vertice>> {
      private Vertice v;
      public readVerticeNeighboors_call(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readVerticeNeighboors", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readVerticeNeighboors_args args = new readVerticeNeighboors_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Vertice> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readVerticeNeighboors();
      }
    }

    public void addAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAresta_call method_call = new addAresta_call(a, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAresta_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Aresta a;
      public addAresta_call(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAresta_args args = new addAresta_args();
        args.setA(a);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAresta();
      }
    }

    public void readAresta(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAresta_call method_call = new readAresta_call(nomeV1, nomeV2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAresta_call extends org.apache.thrift.async.TAsyncMethodCall<Aresta> {
      private int nomeV1;
      private int nomeV2;
      public readAresta_call(int nomeV1, int nomeV2, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nomeV1 = nomeV1;
        this.nomeV2 = nomeV2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAresta_args args = new readAresta_args();
        args.setNomeV1(nomeV1);
        args.setNomeV2(nomeV2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Aresta getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAresta();
      }
    }

    public void readAllAresta(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAllAresta_call method_call = new readAllAresta_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAllAresta_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Aresta>> {
      public readAllAresta_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAllAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAllAresta_args args = new readAllAresta_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Aresta> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAllAresta();
      }
    }

    public void readAllArestaOfVertice(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAllArestaOfVertice_call method_call = new readAllArestaOfVertice_call(v, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAllArestaOfVertice_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Aresta>> {
      private Vertice v;
      public readAllArestaOfVertice_call(Vertice v, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.v = v;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAllArestaOfVertice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAllArestaOfVertice_args args = new readAllArestaOfVertice_args();
        args.setV(v);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Aresta> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAllArestaOfVertice();
      }
    }

    public void updateAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAresta_call method_call = new updateAresta_call(a, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAresta_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Aresta a;
      public updateAresta_call(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAresta_args args = new updateAresta_args();
        args.setA(a);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAresta();
      }
    }

    public void deleteAresta(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAresta_call method_call = new deleteAresta_call(a, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAresta_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Aresta a;
      public deleteAresta_call(Aresta a, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAresta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAresta_args args = new deleteAresta_args();
        args.setA(a);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAresta();
      }
    }

    public void readVerticeNode(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readVerticeNode_call method_call = new readVerticeNode_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readVerticeNode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Vertice>> {
      public readVerticeNode_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readVerticeNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readVerticeNode_args args = new readVerticeNode_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Vertice> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readVerticeNode();
      }
    }

    public void readArestaNode(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readArestaNode_call method_call = new readArestaNode_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readArestaNode_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Aresta>> {
      public readArestaNode_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readArestaNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readArestaNode_args args = new readArestaNode_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Aresta> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readArestaNode();
      }
    }

    public void procuraMenorDistancia(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      procuraMenorDistancia_call method_call = new procuraMenorDistancia_call(dist, visitado, vertices, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class procuraMenorDistancia_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.util.Map<java.lang.Integer,java.lang.Double> dist;
      private java.util.Map<java.lang.Integer,java.lang.Integer> visitado;
      private java.util.List<Vertice> vertices;
      public procuraMenorDistancia_call(java.util.Map<java.lang.Integer,java.lang.Double> dist, java.util.Map<java.lang.Integer,java.lang.Integer> visitado, java.util.List<Vertice> vertices, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dist = dist;
        this.visitado = visitado;
        this.vertices = vertices;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("procuraMenorDistancia", org.apache.thrift.protocol.TMessageType.CALL, 0));
        procuraMenorDistancia_args args = new procuraMenorDistancia_args();
        args.setDist(dist);
        args.setVisitado(visitado);
        args.setVertices(vertices);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_procuraMenorDistancia();
      }
    }

    public void menorCaminho(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      menorCaminho_call method_call = new menorCaminho_call(ini, fim, ant, dist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class menorCaminho_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Vertice>> {
      private int ini;
      private int fim;
      private java.util.Map<java.lang.Integer,java.lang.Integer> ant;
      private java.util.Map<java.lang.Integer,java.lang.Double> dist;
      public menorCaminho_call(int ini, int fim, java.util.Map<java.lang.Integer,java.lang.Integer> ant, java.util.Map<java.lang.Integer,java.lang.Double> dist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ini = ini;
        this.fim = fim;
        this.ant = ant;
        this.dist = dist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("menorCaminho", org.apache.thrift.protocol.TMessageType.CALL, 0));
        menorCaminho_args args = new menorCaminho_args();
        args.setIni(ini);
        args.setFim(fim);
        args.setAnt(ant);
        args.setDist(dist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Vertice> getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_menorCaminho();
      }
    }

    public void stabilizeCluster(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stabilizeCluster_call method_call = new stabilizeCluster_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stabilizeCluster_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public stabilizeCluster_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stabilizeCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stabilizeCluster_args args = new stabilizeCluster_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void setCluster(java.util.List<Finger> cluster, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCluster_call method_call = new setCluster_call(cluster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCluster_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<Finger> cluster;
      public setCluster_call(java.util.List<Finger> cluster, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cluster = cluster;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCluster_args args = new setCluster_args();
        args.setCluster(cluster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws KeyNotFound, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends Chord.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addVertice", new addVertice());
      processMap.put("readVertice", new readVertice());
      processMap.put("updateVertice", new updateVertice());
      processMap.put("deleteVertice", new deleteVertice());
      processMap.put("readAllVertice", new readAllVertice());
      processMap.put("readVerticeNeighboors", new readVerticeNeighboors());
      processMap.put("addAresta", new addAresta());
      processMap.put("readAresta", new readAresta());
      processMap.put("readAllAresta", new readAllAresta());
      processMap.put("readAllArestaOfVertice", new readAllArestaOfVertice());
      processMap.put("updateAresta", new updateAresta());
      processMap.put("deleteAresta", new deleteAresta());
      processMap.put("readVerticeNode", new readVerticeNode());
      processMap.put("readArestaNode", new readArestaNode());
      processMap.put("procuraMenorDistancia", new procuraMenorDistancia());
      processMap.put("menorCaminho", new menorCaminho());
      processMap.put("stabilizeCluster", new stabilizeCluster());
      processMap.put("setCluster", new setCluster());
      return processMap;
    }

    public static class addVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVertice_args> {
      public addVertice() {
        super("addVertice");
      }

      public addVertice_args getEmptyArgsInstance() {
        return new addVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addVertice_result getResult(I iface, addVertice_args args) throws org.apache.thrift.TException {
        addVertice_result result = new addVertice_result();
        try {
          result.success = iface.addVertice(args.v);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readVertice_args> {
      public readVertice() {
        super("readVertice");
      }

      public readVertice_args getEmptyArgsInstance() {
        return new readVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readVertice_result getResult(I iface, readVertice_args args) throws org.apache.thrift.TException {
        readVertice_result result = new readVertice_result();
        try {
          result.success = iface.readVertice(args.nome);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class updateVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVertice_args> {
      public updateVertice() {
        super("updateVertice");
      }

      public updateVertice_args getEmptyArgsInstance() {
        return new updateVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateVertice_result getResult(I iface, updateVertice_args args) throws org.apache.thrift.TException {
        updateVertice_result result = new updateVertice_result();
        try {
          result.success = iface.updateVertice(args.v);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class deleteVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVertice_args> {
      public deleteVertice() {
        super("deleteVertice");
      }

      public deleteVertice_args getEmptyArgsInstance() {
        return new deleteVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteVertice_result getResult(I iface, deleteVertice_args args) throws org.apache.thrift.TException {
        deleteVertice_result result = new deleteVertice_result();
        try {
          result.success = iface.deleteVertice(args.v);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readAllVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAllVertice_args> {
      public readAllVertice() {
        super("readAllVertice");
      }

      public readAllVertice_args getEmptyArgsInstance() {
        return new readAllVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readAllVertice_result getResult(I iface, readAllVertice_args args) throws org.apache.thrift.TException {
        readAllVertice_result result = new readAllVertice_result();
        try {
          result.success = iface.readAllVertice();
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readVerticeNeighboors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readVerticeNeighboors_args> {
      public readVerticeNeighboors() {
        super("readVerticeNeighboors");
      }

      public readVerticeNeighboors_args getEmptyArgsInstance() {
        return new readVerticeNeighboors_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readVerticeNeighboors_result getResult(I iface, readVerticeNeighboors_args args) throws org.apache.thrift.TException {
        readVerticeNeighboors_result result = new readVerticeNeighboors_result();
        try {
          result.success = iface.readVerticeNeighboors(args.v);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class addAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAresta_args> {
      public addAresta() {
        super("addAresta");
      }

      public addAresta_args getEmptyArgsInstance() {
        return new addAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addAresta_result getResult(I iface, addAresta_args args) throws org.apache.thrift.TException {
        addAresta_result result = new addAresta_result();
        try {
          result.success = iface.addAresta(args.a);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAresta_args> {
      public readAresta() {
        super("readAresta");
      }

      public readAresta_args getEmptyArgsInstance() {
        return new readAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readAresta_result getResult(I iface, readAresta_args args) throws org.apache.thrift.TException {
        readAresta_result result = new readAresta_result();
        try {
          result.success = iface.readAresta(args.nomeV1, args.nomeV2);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readAllAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAllAresta_args> {
      public readAllAresta() {
        super("readAllAresta");
      }

      public readAllAresta_args getEmptyArgsInstance() {
        return new readAllAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readAllAresta_result getResult(I iface, readAllAresta_args args) throws org.apache.thrift.TException {
        readAllAresta_result result = new readAllAresta_result();
        try {
          result.success = iface.readAllAresta();
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readAllArestaOfVertice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAllArestaOfVertice_args> {
      public readAllArestaOfVertice() {
        super("readAllArestaOfVertice");
      }

      public readAllArestaOfVertice_args getEmptyArgsInstance() {
        return new readAllArestaOfVertice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readAllArestaOfVertice_result getResult(I iface, readAllArestaOfVertice_args args) throws org.apache.thrift.TException {
        readAllArestaOfVertice_result result = new readAllArestaOfVertice_result();
        try {
          result.success = iface.readAllArestaOfVertice(args.v);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class updateAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAresta_args> {
      public updateAresta() {
        super("updateAresta");
      }

      public updateAresta_args getEmptyArgsInstance() {
        return new updateAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      //@Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateAresta_result getResult(I iface, updateAresta_args args) throws org.apache.thrift.TException {
        updateAresta_result result = new updateAresta_result();
        try {
          result.success = iface.updateAresta(args.a);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class deleteAresta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAresta_args> {
      public deleteAresta() {
        super("deleteAresta");
      }

      public deleteAresta_args getEmptyArgsInstance() {
        return new deleteAresta_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteAresta_result getResult(I iface, deleteAresta_args args) throws org.apache.thrift.TException {
        deleteAresta_result result = new deleteAresta_result();
        try {
          result.success = iface.deleteAresta(args.a);
          result.setSuccessIsSet(true);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readVerticeNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readVerticeNode_args> {
      public readVerticeNode() {
        super("readVerticeNode");
      }

      public readVerticeNode_args getEmptyArgsInstance() {
        return new readVerticeNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readVerticeNode_result getResult(I iface, readVerticeNode_args args) throws org.apache.thrift.TException {
        readVerticeNode_result result = new readVerticeNode_result();
        try {
          result.success = iface.readVerticeNode();
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class readArestaNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readArestaNode_args> {
      public readArestaNode() {
        super("readArestaNode");
      }

      public readArestaNode_args getEmptyArgsInstance() {
        return new readArestaNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public readArestaNode_result getResult(I iface, readArestaNode_args args) throws org.apache.thrift.TException {
        readArestaNode_result result = new readArestaNode_result();
        try {
          result.success = iface.readArestaNode();
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class procuraMenorDistancia<I extends Iface> extends org.apache.thrift.ProcessFunction<I, procuraMenorDistancia_args> {
      public procuraMenorDistancia() {
        super("procuraMenorDistancia");
      }

      public procuraMenorDistancia_args getEmptyArgsInstance() {
        return new procuraMenorDistancia_args();
      }

      protected boolean isOneway() {
        return false;
      }

     // @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public procuraMenorDistancia_result getResult(I iface, procuraMenorDistancia_args args) throws org.apache.thrift.TException {
        procuraMenorDistancia_result result = new procuraMenorDistancia_result();
        result.success = iface.procuraMenorDistancia(args.dist, args.visitado, args.vertices);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class menorCaminho<I extends Iface> extends org.apache.thrift.ProcessFunction<I, menorCaminho_args> {
      public menorCaminho() {
        super("menorCaminho");
      }

      public menorCaminho_args getEmptyArgsInstance() {
        return new menorCaminho_args();
      }

      protected boolean isOneway() {
        return false;
      }

    //  @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public menorCaminho_result getResult(I iface, menorCaminho_args args) throws org.apache.thrift.TException {
        menorCaminho_result result = new menorCaminho_result();
        try {
          result.success = iface.menorCaminho(args.ini, args.fim, args.ant, args.dist);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class stabilizeCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stabilizeCluster_args> {
      public stabilizeCluster() {
        super("stabilizeCluster");
      }

      public stabilizeCluster_args getEmptyArgsInstance() {
        return new stabilizeCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

    //  @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public stabilizeCluster_result getResult(I iface, stabilizeCluster_args args) throws org.apache.thrift.TException {
        stabilizeCluster_result result = new stabilizeCluster_result();
        try {
          iface.stabilizeCluster();
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

    public static class setCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCluster_args> {
      public setCluster() {
        super("setCluster");
      }

      public setCluster_args getEmptyArgsInstance() {
        return new setCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

    //  @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public setCluster_result getResult(I iface, setCluster_args args) throws org.apache.thrift.TException {
        setCluster_result result = new setCluster_result();
        try {
          iface.setCluster(args.cluster);
        } catch (KeyNotFound knf) {
          result.knf = knf;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends Chord.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addVertice", new addVertice());
      processMap.put("readVertice", new readVertice());
      processMap.put("updateVertice", new updateVertice());
      processMap.put("deleteVertice", new deleteVertice());
      processMap.put("readAllVertice", new readAllVertice());
      processMap.put("readVerticeNeighboors", new readVerticeNeighboors());
      processMap.put("addAresta", new addAresta());
      processMap.put("readAresta", new readAresta());
      processMap.put("readAllAresta", new readAllAresta());
      processMap.put("readAllArestaOfVertice", new readAllArestaOfVertice());
      processMap.put("updateAresta", new updateAresta());
      processMap.put("deleteAresta", new deleteAresta());
      processMap.put("readVerticeNode", new readVerticeNode());
      processMap.put("readArestaNode", new readArestaNode());
      processMap.put("procuraMenorDistancia", new procuraMenorDistancia());
      processMap.put("menorCaminho", new menorCaminho());
      processMap.put("stabilizeCluster", new stabilizeCluster());
      processMap.put("setCluster", new setCluster());
      return processMap;
    }

    public static class addVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVertice_args, java.lang.Boolean> {
      public addVertice() {
        super("addVertice");
      }

      public addVertice_args getEmptyArgsInstance() {
        return new addVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addVertice_result result = new addVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addVertice_result result = new addVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVertice_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addVertice(args.v,resultHandler);
      }
    }

    public static class readVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readVertice_args, Vertice> {
      public readVertice() {
        super("readVertice");
      }

      public readVertice_args getEmptyArgsInstance() {
        return new readVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Vertice> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Vertice>() { 
          public void onComplete(Vertice o) {
            readVertice_result result = new readVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readVertice_result result = new readVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readVertice_args args, org.apache.thrift.async.AsyncMethodCallback<Vertice> resultHandler) throws org.apache.thrift.TException {
        iface.readVertice(args.nome,resultHandler);
      }
    }

    public static class updateVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVertice_args, java.lang.Boolean> {
      public updateVertice() {
        super("updateVertice");
      }

      public updateVertice_args getEmptyArgsInstance() {
        return new updateVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateVertice_result result = new updateVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateVertice_result result = new updateVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVertice_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateVertice(args.v,resultHandler);
      }
    }

    public static class deleteVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteVertice_args, java.lang.Boolean> {
      public deleteVertice() {
        super("deleteVertice");
      }

      public deleteVertice_args getEmptyArgsInstance() {
        return new deleteVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteVertice_result result = new deleteVertice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteVertice_result result = new deleteVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteVertice_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteVertice(args.v,resultHandler);
      }
    }

    public static class readAllVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readAllVertice_args, java.util.List<Vertice>> {
      public readAllVertice() {
        super("readAllVertice");
      }

      public readAllVertice_args getEmptyArgsInstance() {
        return new readAllVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>>() { 
          public void onComplete(java.util.List<Vertice> o) {
            readAllVertice_result result = new readAllVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readAllVertice_result result = new readAllVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readAllVertice_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
        iface.readAllVertice(resultHandler);
      }
    }

    public static class readVerticeNeighboors<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readVerticeNeighboors_args, java.util.List<Vertice>> {
      public readVerticeNeighboors() {
        super("readVerticeNeighboors");
      }

      public readVerticeNeighboors_args getEmptyArgsInstance() {
        return new readVerticeNeighboors_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>>() { 
          public void onComplete(java.util.List<Vertice> o) {
            readVerticeNeighboors_result result = new readVerticeNeighboors_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readVerticeNeighboors_result result = new readVerticeNeighboors_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readVerticeNeighboors_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
        iface.readVerticeNeighboors(args.v,resultHandler);
      }
    }

    public static class addAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAresta_args, java.lang.Boolean> {
      public addAresta() {
        super("addAresta");
      }

      public addAresta_args getEmptyArgsInstance() {
        return new addAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addAresta_result result = new addAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addAresta_result result = new addAresta_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAresta_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addAresta(args.a,resultHandler);
      }
    }

    public static class readAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readAresta_args, Aresta> {
      public readAresta() {
        super("readAresta");
      }

      public readAresta_args getEmptyArgsInstance() {
        return new readAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Aresta> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Aresta>() { 
          public void onComplete(Aresta o) {
            readAresta_result result = new readAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readAresta_result result = new readAresta_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readAresta_args args, org.apache.thrift.async.AsyncMethodCallback<Aresta> resultHandler) throws org.apache.thrift.TException {
        iface.readAresta(args.nomeV1, args.nomeV2,resultHandler);
      }
    }

    public static class readAllAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readAllAresta_args, java.util.List<Aresta>> {
      public readAllAresta() {
        super("readAllAresta");
      }

      public readAllAresta_args getEmptyArgsInstance() {
        return new readAllAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>>() { 
          public void onComplete(java.util.List<Aresta> o) {
            readAllAresta_result result = new readAllAresta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readAllAresta_result result = new readAllAresta_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readAllAresta_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
        iface.readAllAresta(resultHandler);
      }
    }

    public static class readAllArestaOfVertice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readAllArestaOfVertice_args, java.util.List<Aresta>> {
      public readAllArestaOfVertice() {
        super("readAllArestaOfVertice");
      }

      public readAllArestaOfVertice_args getEmptyArgsInstance() {
        return new readAllArestaOfVertice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>>() { 
          public void onComplete(java.util.List<Aresta> o) {
            readAllArestaOfVertice_result result = new readAllArestaOfVertice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readAllArestaOfVertice_result result = new readAllArestaOfVertice_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readAllArestaOfVertice_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
        iface.readAllArestaOfVertice(args.v,resultHandler);
      }
    }

    public static class updateAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAresta_args, java.lang.Boolean> {
      public updateAresta() {
        super("updateAresta");
      }

      public updateAresta_args getEmptyArgsInstance() {
        return new updateAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateAresta_result result = new updateAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAresta_result result = new updateAresta_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAresta_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateAresta(args.a,resultHandler);
      }
    }

    public static class deleteAresta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAresta_args, java.lang.Boolean> {
      public deleteAresta() {
        super("deleteAresta");
      }

      public deleteAresta_args getEmptyArgsInstance() {
        return new deleteAresta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteAresta_result result = new deleteAresta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteAresta_result result = new deleteAresta_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAresta_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteAresta(args.a,resultHandler);
      }
    }

    public static class readVerticeNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readVerticeNode_args, java.util.List<Vertice>> {
      public readVerticeNode() {
        super("readVerticeNode");
      }

      public readVerticeNode_args getEmptyArgsInstance() {
        return new readVerticeNode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>>() { 
          public void onComplete(java.util.List<Vertice> o) {
            readVerticeNode_result result = new readVerticeNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readVerticeNode_result result = new readVerticeNode_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readVerticeNode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
        iface.readVerticeNode(resultHandler);
      }
    }

    public static class readArestaNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readArestaNode_args, java.util.List<Aresta>> {
      public readArestaNode() {
        super("readArestaNode");
      }

      public readArestaNode_args getEmptyArgsInstance() {
        return new readArestaNode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>>() { 
          public void onComplete(java.util.List<Aresta> o) {
            readArestaNode_result result = new readArestaNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            readArestaNode_result result = new readArestaNode_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readArestaNode_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Aresta>> resultHandler) throws org.apache.thrift.TException {
        iface.readArestaNode(resultHandler);
      }
    }

    public static class procuraMenorDistancia<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, procuraMenorDistancia_args, java.lang.Integer> {
      public procuraMenorDistancia() {
        super("procuraMenorDistancia");
      }

      public procuraMenorDistancia_args getEmptyArgsInstance() {
        return new procuraMenorDistancia_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            procuraMenorDistancia_result result = new procuraMenorDistancia_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            procuraMenorDistancia_result result = new procuraMenorDistancia_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, procuraMenorDistancia_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.procuraMenorDistancia(args.dist, args.visitado, args.vertices,resultHandler);
      }
    }

    public static class menorCaminho<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, menorCaminho_args, java.util.List<Vertice>> {
      public menorCaminho() {
        super("menorCaminho");
      }

      public menorCaminho_args getEmptyArgsInstance() {
        return new menorCaminho_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>>() { 
          public void onComplete(java.util.List<Vertice> o) {
            menorCaminho_result result = new menorCaminho_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            menorCaminho_result result = new menorCaminho_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, menorCaminho_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Vertice>> resultHandler) throws org.apache.thrift.TException {
        iface.menorCaminho(args.ini, args.fim, args.ant, args.dist,resultHandler);
      }
    }

    public static class stabilizeCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stabilizeCluster_args, Void> {
      public stabilizeCluster() {
        super("stabilizeCluster");
      }

      public stabilizeCluster_args getEmptyArgsInstance() {
        return new stabilizeCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stabilizeCluster_result result = new stabilizeCluster_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            stabilizeCluster_result result = new stabilizeCluster_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stabilizeCluster_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.stabilizeCluster(resultHandler);
      }
    }

    public static class setCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCluster_args, Void> {
      public setCluster() {
        super("setCluster");
      }

      public setCluster_args getEmptyArgsInstance() {
        return new setCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setCluster_result result = new setCluster_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setCluster_result result = new setCluster_result();
            if (e instanceof KeyNotFound) {
              result.knf = (KeyNotFound) e;
              result.setKnfIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setCluster_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.setCluster(args.cluster,resultHandler);
      }
    }

  }

  public static class addVertice_args implements org.apache.thrift.TBase<addVertice_args, addVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVertice_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addVertice_argsTupleSchemeFactory();

    public Vertice v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVertice_args.class, metaDataMap);
    }

    public addVertice_args() {
    }

    public addVertice_args(
      Vertice v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVertice_args(addVertice_args other) {
      if (other.isSetV()) {
        this.v = new Vertice(other.v);
      }
    }

    public addVertice_args deepCopy() {
      return new addVertice_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertice getV() {
      return this.v;
    }

    public addVertice_args setV(Vertice v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addVertice_args)
        return this.equals((addVertice_args)that);
      return false;
    }

    public boolean equals(addVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
      if (isSetV())
        hashCode = hashCode * 8191 + v.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addVertice_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addVertice_argsStandardScheme getScheme() {
        return new addVertice_argsStandardScheme();
      }
    }

    private static class addVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertice();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addVertice_argsTupleScheme getScheme() {
        return new addVertice_argsTupleScheme();
      }
    }

    private static class addVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertice();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addVertice_result implements org.apache.thrift.TBase<addVertice_result, addVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addVertice_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVertice_result.class, metaDataMap);
    }

    public addVertice_result() {
    }

    public addVertice_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVertice_result(addVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public addVertice_result deepCopy() {
      return new addVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public addVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addVertice_result)
        return this.equals((addVertice_result)that);
      return false;
    }

    public boolean equals(addVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addVertice_resultStandardScheme getScheme() {
        return new addVertice_resultStandardScheme();
      }
    }

    private static class addVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addVertice_resultTupleScheme getScheme() {
        return new addVertice_resultTupleScheme();
      }
    }

    private static class addVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVertice_args implements org.apache.thrift.TBase<readVertice_args, readVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<readVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertice_args");

    private static final org.apache.thrift.protocol.TField NOME_FIELD_DESC = new org.apache.thrift.protocol.TField("nome", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVertice_argsTupleSchemeFactory();

    public int nome; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME((short)1, "nome");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME
            return NOME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME, new org.apache.thrift.meta_data.FieldMetaData("nome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertice_args.class, metaDataMap);
    }

    public readVertice_args() {
    }

    public readVertice_args(
      int nome)
    {
      this();
      this.nome = nome;
      setNomeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertice_args(readVertice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nome = other.nome;
    }

    public readVertice_args deepCopy() {
      return new readVertice_args(this);
    }

    @Override
    public void clear() {
      setNomeIsSet(false);
      this.nome = 0;
    }

    public int getNome() {
      return this.nome;
    }

    public readVertice_args setNome(int nome) {
      this.nome = nome;
      setNomeIsSet(true);
      return this;
    }

    public void unsetNome() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    /** Returns true if field nome is set (has been assigned a value) and false otherwise */
    public boolean isSetNome() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOME_ISSET_ID);
    }

    public void setNomeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME:
        if (value == null) {
          unsetNome();
        } else {
          setNome((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME:
        return getNome();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME:
        return isSetNome();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertice_args)
        return this.equals((readVertice_args)that);
      return false;
    }

    public boolean equals(readVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nome = true;
      boolean that_present_nome = true;
      if (this_present_nome || that_present_nome) {
        if (!(this_present_nome && that_present_nome))
          return false;
        if (this.nome != that.nome)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nome;

      return hashCode;
    }

    @Override
    public int compareTo(readVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNome()).compareTo(other.isSetNome());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNome()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nome, other.nome);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVertice_args(");
      boolean first = true;

      sb.append("nome:");
      sb.append(this.nome);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVertice_argsStandardScheme getScheme() {
        return new readVertice_argsStandardScheme();
      }
    }

    private static class readVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nome = iprot.readI32();
                struct.setNomeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_FIELD_DESC);
        oprot.writeI32(struct.nome);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVertice_argsTupleScheme getScheme() {
        return new readVertice_argsTupleScheme();
      }
    }

    private static class readVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNome()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNome()) {
          oprot.writeI32(struct.nome);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nome = iprot.readI32();
          struct.setNomeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVertice_result implements org.apache.thrift.TBase<readVertice_result, readVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<readVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVertice_resultTupleSchemeFactory();

    public Vertice success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVertice_result.class, metaDataMap);
    }

    public readVertice_result() {
    }

    public readVertice_result(
      Vertice success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVertice_result(readVertice_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertice(other.success);
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readVertice_result deepCopy() {
      return new readVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public Vertice getSuccess() {
      return this.success;
    }

    public readVertice_result setSuccess(Vertice success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertice)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVertice_result)
        return this.equals((readVertice_result)that);
      return false;
    }

    public boolean equals(readVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVertice_resultStandardScheme getScheme() {
        return new readVertice_resultStandardScheme();
      }
    }

    private static class readVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertice();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVertice_resultTupleScheme getScheme() {
        return new readVertice_resultTupleScheme();
      }
    }

    private static class readVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Vertice();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateVertice_args implements org.apache.thrift.TBase<updateVertice_args, updateVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertice_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateVertice_argsTupleSchemeFactory();

    public Vertice v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertice_args.class, metaDataMap);
    }

    public updateVertice_args() {
    }

    public updateVertice_args(
      Vertice v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertice_args(updateVertice_args other) {
      if (other.isSetV()) {
        this.v = new Vertice(other.v);
      }
    }

    public updateVertice_args deepCopy() {
      return new updateVertice_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertice getV() {
      return this.v;
    }

    public updateVertice_args setV(Vertice v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertice_args)
        return this.equals((updateVertice_args)that);
      return false;
    }

    public boolean equals(updateVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
      if (isSetV())
        hashCode = hashCode * 8191 + v.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateVertice_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateVertice_argsStandardScheme getScheme() {
        return new updateVertice_argsStandardScheme();
      }
    }

    private static class updateVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertice();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateVertice_argsTupleScheme getScheme() {
        return new updateVertice_argsTupleScheme();
      }
    }

    private static class updateVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertice();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateVertice_result implements org.apache.thrift.TBase<updateVertice_result, updateVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateVertice_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVertice_result.class, metaDataMap);
    }

    public updateVertice_result() {
    }

    public updateVertice_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVertice_result(updateVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public updateVertice_result deepCopy() {
      return new updateVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public updateVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVertice_result)
        return this.equals((updateVertice_result)that);
      return false;
    }

    public boolean equals(updateVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateVertice_resultStandardScheme getScheme() {
        return new updateVertice_resultStandardScheme();
      }
    }

    private static class updateVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateVertice_resultTupleScheme getScheme() {
        return new updateVertice_resultTupleScheme();
      }
    }

    private static class updateVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteVertice_args implements org.apache.thrift.TBase<deleteVertice_args, deleteVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertice_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteVertice_argsTupleSchemeFactory();

    public Vertice v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertice_args.class, metaDataMap);
    }

    public deleteVertice_args() {
    }

    public deleteVertice_args(
      Vertice v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertice_args(deleteVertice_args other) {
      if (other.isSetV()) {
        this.v = new Vertice(other.v);
      }
    }

    public deleteVertice_args deepCopy() {
      return new deleteVertice_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertice getV() {
      return this.v;
    }

    public deleteVertice_args setV(Vertice v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertice_args)
        return this.equals((deleteVertice_args)that);
      return false;
    }

    public boolean equals(deleteVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
      if (isSetV())
        hashCode = hashCode * 8191 + v.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteVertice_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteVertice_argsStandardScheme getScheme() {
        return new deleteVertice_argsStandardScheme();
      }
    }

    private static class deleteVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertice();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteVertice_argsTupleScheme getScheme() {
        return new deleteVertice_argsTupleScheme();
      }
    }

    private static class deleteVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertice();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteVertice_result implements org.apache.thrift.TBase<deleteVertice_result, deleteVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteVertice_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVertice_result.class, metaDataMap);
    }

    public deleteVertice_result() {
    }

    public deleteVertice_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVertice_result(deleteVertice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public deleteVertice_result deepCopy() {
      return new deleteVertice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteVertice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public deleteVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVertice_result)
        return this.equals((deleteVertice_result)that);
      return false;
    }

    public boolean equals(deleteVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteVertice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteVertice_resultStandardScheme getScheme() {
        return new deleteVertice_resultStandardScheme();
      }
    }

    private static class deleteVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteVertice_resultTupleScheme getScheme() {
        return new deleteVertice_resultTupleScheme();
      }
    }

    private static class deleteVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllVertice_args implements org.apache.thrift.TBase<readAllVertice_args, readAllVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<readAllVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllVertice_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllVertice_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllVertice_args.class, metaDataMap);
    }

    public readAllVertice_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllVertice_args(readAllVertice_args other) {
    }

    public readAllVertice_args deepCopy() {
      return new readAllVertice_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllVertice_args)
        return this.equals((readAllVertice_args)that);
      return false;
    }

    public boolean equals(readAllVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(readAllVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllVertice_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllVertice_argsStandardScheme getScheme() {
        return new readAllVertice_argsStandardScheme();
      }
    }

    private static class readAllVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllVertice_argsTupleScheme getScheme() {
        return new readAllVertice_argsTupleScheme();
      }
    }

    private static class readAllVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllVertice_result implements org.apache.thrift.TBase<readAllVertice_result, readAllVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<readAllVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllVertice_resultTupleSchemeFactory();

    public java.util.List<Vertice> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllVertice_result.class, metaDataMap);
    }

    public readAllVertice_result() {
    }

    public readAllVertice_result(
      java.util.List<Vertice> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllVertice_result(readAllVertice_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Vertice> __this__success = new java.util.ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readAllVertice_result deepCopy() {
      return new readAllVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public java.util.List<Vertice> getSuccess() {
      return this.success;
    }

    public readAllVertice_result setSuccess(java.util.List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readAllVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllVertice_result)
        return this.equals((readAllVertice_result)that);
      return false;
    }

    public boolean equals(readAllVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readAllVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllVertice_resultStandardScheme getScheme() {
        return new readAllVertice_resultStandardScheme();
      }
    }

    private static class readAllVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Vertice>(_list42.size);
                  Vertice _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = new Vertice();
                    _elem43.read(iprot);
                    struct.success.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllVertice_resultTupleScheme getScheme() {
        return new readAllVertice_resultTupleScheme();
      }
    }

    private static class readAllVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Vertice>(_list47.size);
            Vertice _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = new Vertice();
              _elem48.read(iprot);
              struct.success.add(_elem48);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVerticeNeighboors_args implements org.apache.thrift.TBase<readVerticeNeighboors_args, readVerticeNeighboors_args._Fields>, java.io.Serializable, Cloneable, Comparable<readVerticeNeighboors_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVerticeNeighboors_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVerticeNeighboors_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVerticeNeighboors_argsTupleSchemeFactory();

    public Vertice v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVerticeNeighboors_args.class, metaDataMap);
    }

    public readVerticeNeighboors_args() {
    }

    public readVerticeNeighboors_args(
      Vertice v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVerticeNeighboors_args(readVerticeNeighboors_args other) {
      if (other.isSetV()) {
        this.v = new Vertice(other.v);
      }
    }

    public readVerticeNeighboors_args deepCopy() {
      return new readVerticeNeighboors_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertice getV() {
      return this.v;
    }

    public readVerticeNeighboors_args setV(Vertice v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVerticeNeighboors_args)
        return this.equals((readVerticeNeighboors_args)that);
      return false;
    }

    public boolean equals(readVerticeNeighboors_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
      if (isSetV())
        hashCode = hashCode * 8191 + v.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readVerticeNeighboors_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVerticeNeighboors_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVerticeNeighboors_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNeighboors_argsStandardScheme getScheme() {
        return new readVerticeNeighboors_argsStandardScheme();
      }
    }

    private static class readVerticeNeighboors_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVerticeNeighboors_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVerticeNeighboors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertice();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVerticeNeighboors_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVerticeNeighboors_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNeighboors_argsTupleScheme getScheme() {
        return new readVerticeNeighboors_argsTupleScheme();
      }
    }

    private static class readVerticeNeighboors_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVerticeNeighboors_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVerticeNeighboors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVerticeNeighboors_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertice();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVerticeNeighboors_result implements org.apache.thrift.TBase<readVerticeNeighboors_result, readVerticeNeighboors_result._Fields>, java.io.Serializable, Cloneable, Comparable<readVerticeNeighboors_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVerticeNeighboors_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVerticeNeighboors_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVerticeNeighboors_resultTupleSchemeFactory();

    public java.util.List<Vertice> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVerticeNeighboors_result.class, metaDataMap);
    }

    public readVerticeNeighboors_result() {
    }

    public readVerticeNeighboors_result(
      java.util.List<Vertice> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVerticeNeighboors_result(readVerticeNeighboors_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Vertice> __this__success = new java.util.ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readVerticeNeighboors_result deepCopy() {
      return new readVerticeNeighboors_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public java.util.List<Vertice> getSuccess() {
      return this.success;
    }

    public readVerticeNeighboors_result setSuccess(java.util.List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readVerticeNeighboors_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVerticeNeighboors_result)
        return this.equals((readVerticeNeighboors_result)that);
      return false;
    }

    public boolean equals(readVerticeNeighboors_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readVerticeNeighboors_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVerticeNeighboors_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVerticeNeighboors_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNeighboors_resultStandardScheme getScheme() {
        return new readVerticeNeighboors_resultStandardScheme();
      }
    }

    private static class readVerticeNeighboors_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVerticeNeighboors_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVerticeNeighboors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Vertice>(_list50.size);
                  Vertice _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new Vertice();
                    _elem51.read(iprot);
                    struct.success.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVerticeNeighboors_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVerticeNeighboors_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNeighboors_resultTupleScheme getScheme() {
        return new readVerticeNeighboors_resultTupleScheme();
      }
    }

    private static class readVerticeNeighboors_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVerticeNeighboors_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVerticeNeighboors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVerticeNeighboors_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Vertice>(_list55.size);
            Vertice _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = new Vertice();
              _elem56.read(iprot);
              struct.success.add(_elem56);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addAresta_args implements org.apache.thrift.TBase<addAresta_args, addAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAresta_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAresta_argsTupleSchemeFactory();

    public Aresta a; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAresta_args.class, metaDataMap);
    }

    public addAresta_args() {
    }

    public addAresta_args(
      Aresta a)
    {
      this();
      this.a = a;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAresta_args(addAresta_args other) {
      if (other.isSetA()) {
        this.a = new Aresta(other.a);
      }
    }

    public addAresta_args deepCopy() {
      return new addAresta_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
    }

    public Aresta getA() {
      return this.a;
    }

    public addAresta_args setA(Aresta a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((Aresta)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addAresta_args)
        return this.equals((addAresta_args)that);
      return false;
    }

    public boolean equals(addAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetA()) ? 131071 : 524287);
      if (isSetA())
        hashCode = hashCode * 8191 + a.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addAresta_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (a != null) {
        a.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addAresta_argsStandardScheme getScheme() {
        return new addAresta_argsStandardScheme();
      }
    }

    private static class addAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new Aresta();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addAresta_argsTupleScheme getScheme() {
        return new addAresta_argsTupleScheme();
      }
    }

    private static class addAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a = new Aresta();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addAresta_result implements org.apache.thrift.TBase<addAresta_result, addAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAresta_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAresta_result.class, metaDataMap);
    }

    public addAresta_result() {
    }

    public addAresta_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAresta_result(addAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public addAresta_result deepCopy() {
      return new addAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public addAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addAresta_result)
        return this.equals((addAresta_result)that);
      return false;
    }

    public boolean equals(addAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addAresta_resultStandardScheme getScheme() {
        return new addAresta_resultStandardScheme();
      }
    }

    private static class addAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addAresta_resultTupleScheme getScheme() {
        return new addAresta_resultTupleScheme();
      }
    }

    private static class addAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAresta_args implements org.apache.thrift.TBase<readAresta_args, readAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<readAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAresta_args");

    private static final org.apache.thrift.protocol.TField NOME_V1_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NOME_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("nomeV2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAresta_argsTupleSchemeFactory();

    public int nomeV1; // required
    public int nomeV2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NOME_V1((short)1, "nomeV1"),
      NOME_V2((short)2, "nomeV2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NOME_V1
            return NOME_V1;
          case 2: // NOME_V2
            return NOME_V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NOMEV1_ISSET_ID = 0;
    private static final int __NOMEV2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NOME_V1, new org.apache.thrift.meta_data.FieldMetaData("nomeV1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOME_V2, new org.apache.thrift.meta_data.FieldMetaData("nomeV2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAresta_args.class, metaDataMap);
    }

    public readAresta_args() {
    }

    public readAresta_args(
      int nomeV1,
      int nomeV2)
    {
      this();
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAresta_args(readAresta_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nomeV1 = other.nomeV1;
      this.nomeV2 = other.nomeV2;
    }

    public readAresta_args deepCopy() {
      return new readAresta_args(this);
    }

    @Override
    public void clear() {
      setNomeV1IsSet(false);
      this.nomeV1 = 0;
      setNomeV2IsSet(false);
      this.nomeV2 = 0;
    }

    public int getNomeV1() {
      return this.nomeV1;
    }

    public readAresta_args setNomeV1(int nomeV1) {
      this.nomeV1 = nomeV1;
      setNomeV1IsSet(true);
      return this;
    }

    public void unsetNomeV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    /** Returns true if field nomeV1 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV1_ISSET_ID);
    }

    public void setNomeV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV1_ISSET_ID, value);
    }

    public int getNomeV2() {
      return this.nomeV2;
    }

    public readAresta_args setNomeV2(int nomeV2) {
      this.nomeV2 = nomeV2;
      setNomeV2IsSet(true);
      return this;
    }

    public void unsetNomeV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    /** Returns true if field nomeV2 is set (has been assigned a value) and false otherwise */
    public boolean isSetNomeV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOMEV2_ISSET_ID);
    }

    public void setNomeV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOMEV2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NOME_V1:
        if (value == null) {
          unsetNomeV1();
        } else {
          setNomeV1((java.lang.Integer)value);
        }
        break;

      case NOME_V2:
        if (value == null) {
          unsetNomeV2();
        } else {
          setNomeV2((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NOME_V1:
        return getNomeV1();

      case NOME_V2:
        return getNomeV2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NOME_V1:
        return isSetNomeV1();
      case NOME_V2:
        return isSetNomeV2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAresta_args)
        return this.equals((readAresta_args)that);
      return false;
    }

    public boolean equals(readAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nomeV1 = true;
      boolean that_present_nomeV1 = true;
      if (this_present_nomeV1 || that_present_nomeV1) {
        if (!(this_present_nomeV1 && that_present_nomeV1))
          return false;
        if (this.nomeV1 != that.nomeV1)
          return false;
      }

      boolean this_present_nomeV2 = true;
      boolean that_present_nomeV2 = true;
      if (this_present_nomeV2 || that_present_nomeV2) {
        if (!(this_present_nomeV2 && that_present_nomeV2))
          return false;
        if (this.nomeV2 != that.nomeV2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nomeV1;

      hashCode = hashCode * 8191 + nomeV2;

      return hashCode;
    }

    @Override
    public int compareTo(readAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNomeV1()).compareTo(other.isSetNomeV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV1, other.nomeV1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNomeV2()).compareTo(other.isSetNomeV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNomeV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nomeV2, other.nomeV2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAresta_args(");
      boolean first = true;

      sb.append("nomeV1:");
      sb.append(this.nomeV1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nomeV2:");
      sb.append(this.nomeV2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAresta_argsStandardScheme getScheme() {
        return new readAresta_argsStandardScheme();
      }
    }

    private static class readAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NOME_V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV1 = iprot.readI32();
                struct.setNomeV1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOME_V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nomeV2 = iprot.readI32();
                struct.setNomeV2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NOME_V1_FIELD_DESC);
        oprot.writeI32(struct.nomeV1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NOME_V2_FIELD_DESC);
        oprot.writeI32(struct.nomeV2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAresta_argsTupleScheme getScheme() {
        return new readAresta_argsTupleScheme();
      }
    }

    private static class readAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNomeV1()) {
          optionals.set(0);
        }
        if (struct.isSetNomeV2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNomeV1()) {
          oprot.writeI32(struct.nomeV1);
        }
        if (struct.isSetNomeV2()) {
          oprot.writeI32(struct.nomeV2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nomeV1 = iprot.readI32();
          struct.setNomeV1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.nomeV2 = iprot.readI32();
          struct.setNomeV2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAresta_result implements org.apache.thrift.TBase<readAresta_result, readAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<readAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAresta_resultTupleSchemeFactory();

    public Aresta success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAresta_result.class, metaDataMap);
    }

    public readAresta_result() {
    }

    public readAresta_result(
      Aresta success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAresta_result(readAresta_result other) {
      if (other.isSetSuccess()) {
        this.success = new Aresta(other.success);
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readAresta_result deepCopy() {
      return new readAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public Aresta getSuccess() {
      return this.success;
    }

    public readAresta_result setSuccess(Aresta success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Aresta)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAresta_result)
        return this.equals((readAresta_result)that);
      return false;
    }

    public boolean equals(readAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAresta_resultStandardScheme getScheme() {
        return new readAresta_resultStandardScheme();
      }
    }

    private static class readAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Aresta();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAresta_resultTupleScheme getScheme() {
        return new readAresta_resultTupleScheme();
      }
    }

    private static class readAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Aresta();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllAresta_args implements org.apache.thrift.TBase<readAllAresta_args, readAllAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<readAllAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllAresta_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllAresta_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllAresta_args.class, metaDataMap);
    }

    public readAllAresta_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllAresta_args(readAllAresta_args other) {
    }

    public readAllAresta_args deepCopy() {
      return new readAllAresta_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllAresta_args)
        return this.equals((readAllAresta_args)that);
      return false;
    }

    public boolean equals(readAllAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(readAllAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllAresta_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllAresta_argsStandardScheme getScheme() {
        return new readAllAresta_argsStandardScheme();
      }
    }

    private static class readAllAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllAresta_argsTupleScheme getScheme() {
        return new readAllAresta_argsTupleScheme();
      }
    }

    private static class readAllAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllAresta_result implements org.apache.thrift.TBase<readAllAresta_result, readAllAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<readAllAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllAresta_resultTupleSchemeFactory();

    public java.util.List<Aresta> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllAresta_result.class, metaDataMap);
    }

    public readAllAresta_result() {
    }

    public readAllAresta_result(
      java.util.List<Aresta> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllAresta_result(readAllAresta_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Aresta> __this__success = new java.util.ArrayList<Aresta>(other.success.size());
        for (Aresta other_element : other.success) {
          __this__success.add(new Aresta(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readAllAresta_result deepCopy() {
      return new readAllAresta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Aresta> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Aresta elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Aresta>();
      }
      this.success.add(elem);
    }

    public java.util.List<Aresta> getSuccess() {
      return this.success;
    }

    public readAllAresta_result setSuccess(java.util.List<Aresta> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readAllAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Aresta>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllAresta_result)
        return this.equals((readAllAresta_result)that);
      return false;
    }

    public boolean equals(readAllAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readAllAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllAresta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllAresta_resultStandardScheme getScheme() {
        return new readAllAresta_resultStandardScheme();
      }
    }

    private static class readAllAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Aresta>(_list58.size);
                  Aresta _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new Aresta();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Aresta _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllAresta_resultTupleScheme getScheme() {
        return new readAllAresta_resultTupleScheme();
      }
    }

    private static class readAllAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Aresta _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Aresta>(_list63.size);
            Aresta _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new Aresta();
              _elem64.read(iprot);
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllArestaOfVertice_args implements org.apache.thrift.TBase<readAllArestaOfVertice_args, readAllArestaOfVertice_args._Fields>, java.io.Serializable, Cloneable, Comparable<readAllArestaOfVertice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllArestaOfVertice_args");

    private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllArestaOfVertice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllArestaOfVertice_argsTupleSchemeFactory();

    public Vertice v; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      V((short)1, "v");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // V
            return V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllArestaOfVertice_args.class, metaDataMap);
    }

    public readAllArestaOfVertice_args() {
    }

    public readAllArestaOfVertice_args(
      Vertice v)
    {
      this();
      this.v = v;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllArestaOfVertice_args(readAllArestaOfVertice_args other) {
      if (other.isSetV()) {
        this.v = new Vertice(other.v);
      }
    }

    public readAllArestaOfVertice_args deepCopy() {
      return new readAllArestaOfVertice_args(this);
    }

    @Override
    public void clear() {
      this.v = null;
    }

    public Vertice getV() {
      return this.v;
    }

    public readAllArestaOfVertice_args setV(Vertice v) {
      this.v = v;
      return this;
    }

    public void unsetV() {
      this.v = null;
    }

    /** Returns true if field v is set (has been assigned a value) and false otherwise */
    public boolean isSetV() {
      return this.v != null;
    }

    public void setVIsSet(boolean value) {
      if (!value) {
        this.v = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case V:
        if (value == null) {
          unsetV();
        } else {
          setV((Vertice)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case V:
        return getV();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case V:
        return isSetV();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllArestaOfVertice_args)
        return this.equals((readAllArestaOfVertice_args)that);
      return false;
    }

    public boolean equals(readAllArestaOfVertice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_v = true && this.isSetV();
      boolean that_present_v = true && that.isSetV();
      if (this_present_v || that_present_v) {
        if (!(this_present_v && that_present_v))
          return false;
        if (!this.v.equals(that.v))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetV()) ? 131071 : 524287);
      if (isSetV())
        hashCode = hashCode * 8191 + v.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readAllArestaOfVertice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetV()).compareTo(other.isSetV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllArestaOfVertice_args(");
      boolean first = true;

      sb.append("v:");
      if (this.v == null) {
        sb.append("null");
      } else {
        sb.append(this.v);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (v != null) {
        v.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllArestaOfVertice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllArestaOfVertice_argsStandardScheme getScheme() {
        return new readAllArestaOfVertice_argsStandardScheme();
      }
    }

    private static class readAllArestaOfVertice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllArestaOfVertice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllArestaOfVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.v = new Vertice();
                struct.v.read(iprot);
                struct.setVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllArestaOfVertice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.v != null) {
          oprot.writeFieldBegin(V_FIELD_DESC);
          struct.v.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllArestaOfVertice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllArestaOfVertice_argsTupleScheme getScheme() {
        return new readAllArestaOfVertice_argsTupleScheme();
      }
    }

    private static class readAllArestaOfVertice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllArestaOfVertice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllArestaOfVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetV()) {
          struct.v.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllArestaOfVertice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.v = new Vertice();
          struct.v.read(iprot);
          struct.setVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readAllArestaOfVertice_result implements org.apache.thrift.TBase<readAllArestaOfVertice_result, readAllArestaOfVertice_result._Fields>, java.io.Serializable, Cloneable, Comparable<readAllArestaOfVertice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllArestaOfVertice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readAllArestaOfVertice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readAllArestaOfVertice_resultTupleSchemeFactory();

    public java.util.List<Aresta> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllArestaOfVertice_result.class, metaDataMap);
    }

    public readAllArestaOfVertice_result() {
    }

    public readAllArestaOfVertice_result(
      java.util.List<Aresta> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllArestaOfVertice_result(readAllArestaOfVertice_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Aresta> __this__success = new java.util.ArrayList<Aresta>(other.success.size());
        for (Aresta other_element : other.success) {
          __this__success.add(new Aresta(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readAllArestaOfVertice_result deepCopy() {
      return new readAllArestaOfVertice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Aresta> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Aresta elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Aresta>();
      }
      this.success.add(elem);
    }

    public java.util.List<Aresta> getSuccess() {
      return this.success;
    }

    public readAllArestaOfVertice_result setSuccess(java.util.List<Aresta> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readAllArestaOfVertice_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Aresta>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllArestaOfVertice_result)
        return this.equals((readAllArestaOfVertice_result)that);
      return false;
    }

    public boolean equals(readAllArestaOfVertice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readAllArestaOfVertice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readAllArestaOfVertice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllArestaOfVertice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllArestaOfVertice_resultStandardScheme getScheme() {
        return new readAllArestaOfVertice_resultStandardScheme();
      }
    }

    private static class readAllArestaOfVertice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readAllArestaOfVertice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllArestaOfVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Aresta>(_list66.size);
                  Aresta _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new Aresta();
                    _elem67.read(iprot);
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllArestaOfVertice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Aresta _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllArestaOfVertice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readAllArestaOfVertice_resultTupleScheme getScheme() {
        return new readAllArestaOfVertice_resultTupleScheme();
      }
    }

    private static class readAllArestaOfVertice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readAllArestaOfVertice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllArestaOfVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Aresta _iter70 : struct.success)
            {
              _iter70.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllArestaOfVertice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Aresta>(_list71.size);
            Aresta _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = new Aresta();
              _elem72.read(iprot);
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAresta_args implements org.apache.thrift.TBase<updateAresta_args, updateAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAresta_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAresta_argsTupleSchemeFactory();

    public Aresta a; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAresta_args.class, metaDataMap);
    }

    public updateAresta_args() {
    }

    public updateAresta_args(
      Aresta a)
    {
      this();
      this.a = a;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAresta_args(updateAresta_args other) {
      if (other.isSetA()) {
        this.a = new Aresta(other.a);
      }
    }

    public updateAresta_args deepCopy() {
      return new updateAresta_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
    }

    public Aresta getA() {
      return this.a;
    }

    public updateAresta_args setA(Aresta a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((Aresta)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAresta_args)
        return this.equals((updateAresta_args)that);
      return false;
    }

    public boolean equals(updateAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetA()) ? 131071 : 524287);
      if (isSetA())
        hashCode = hashCode * 8191 + a.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAresta_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (a != null) {
        a.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAresta_argsStandardScheme getScheme() {
        return new updateAresta_argsStandardScheme();
      }
    }

    private static class updateAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new Aresta();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAresta_argsTupleScheme getScheme() {
        return new updateAresta_argsTupleScheme();
      }
    }

    private static class updateAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a = new Aresta();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAresta_result implements org.apache.thrift.TBase<updateAresta_result, updateAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAresta_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAresta_result.class, metaDataMap);
    }

    public updateAresta_result() {
    }

    public updateAresta_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAresta_result(updateAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public updateAresta_result deepCopy() {
      return new updateAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public updateAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAresta_result)
        return this.equals((updateAresta_result)that);
      return false;
    }

    public boolean equals(updateAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAresta_resultStandardScheme getScheme() {
        return new updateAresta_resultStandardScheme();
      }
    }

    private static class updateAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAresta_resultTupleScheme getScheme() {
        return new updateAresta_resultTupleScheme();
      }
    }

    private static class updateAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAresta_args implements org.apache.thrift.TBase<deleteAresta_args, deleteAresta_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAresta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAresta_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAresta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAresta_argsTupleSchemeFactory();

    public Aresta a; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAresta_args.class, metaDataMap);
    }

    public deleteAresta_args() {
    }

    public deleteAresta_args(
      Aresta a)
    {
      this();
      this.a = a;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAresta_args(deleteAresta_args other) {
      if (other.isSetA()) {
        this.a = new Aresta(other.a);
      }
    }

    public deleteAresta_args deepCopy() {
      return new deleteAresta_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
    }

    public Aresta getA() {
      return this.a;
    }

    public deleteAresta_args setA(Aresta a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((Aresta)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAresta_args)
        return this.equals((deleteAresta_args)that);
      return false;
    }

    public boolean equals(deleteAresta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetA()) ? 131071 : 524287);
      if (isSetA())
        hashCode = hashCode * 8191 + a.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAresta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAresta_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (a != null) {
        a.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAresta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAresta_argsStandardScheme getScheme() {
        return new deleteAresta_argsStandardScheme();
      }
    }

    private static class deleteAresta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAresta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.a = new Aresta();
                struct.a.read(iprot);
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAresta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          struct.a.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAresta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAresta_argsTupleScheme getScheme() {
        return new deleteAresta_argsTupleScheme();
      }
    }

    private static class deleteAresta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAresta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetA()) {
          struct.a.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAresta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.a = new Aresta();
          struct.a.read(iprot);
          struct.setAIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAresta_result implements org.apache.thrift.TBase<deleteAresta_result, deleteAresta_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAresta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAresta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAresta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAresta_resultTupleSchemeFactory();

    public boolean success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAresta_result.class, metaDataMap);
    }

    public deleteAresta_result() {
    }

    public deleteAresta_result(
      boolean success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAresta_result(deleteAresta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public deleteAresta_result deepCopy() {
      return new deleteAresta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.knf = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAresta_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public deleteAresta_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAresta_result)
        return this.equals((deleteAresta_result)that);
      return false;
    }

    public boolean equals(deleteAresta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAresta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAresta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAresta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAresta_resultStandardScheme getScheme() {
        return new deleteAresta_resultStandardScheme();
      }
    }

    private static class deleteAresta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAresta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAresta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAresta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAresta_resultTupleScheme getScheme() {
        return new deleteAresta_resultTupleScheme();
      }
    }

    private static class deleteAresta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAresta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAresta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVerticeNode_args implements org.apache.thrift.TBase<readVerticeNode_args, readVerticeNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<readVerticeNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVerticeNode_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVerticeNode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVerticeNode_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVerticeNode_args.class, metaDataMap);
    }

    public readVerticeNode_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVerticeNode_args(readVerticeNode_args other) {
    }

    public readVerticeNode_args deepCopy() {
      return new readVerticeNode_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVerticeNode_args)
        return this.equals((readVerticeNode_args)that);
      return false;
    }

    public boolean equals(readVerticeNode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(readVerticeNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVerticeNode_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVerticeNode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNode_argsStandardScheme getScheme() {
        return new readVerticeNode_argsStandardScheme();
      }
    }

    private static class readVerticeNode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVerticeNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVerticeNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVerticeNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVerticeNode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNode_argsTupleScheme getScheme() {
        return new readVerticeNode_argsTupleScheme();
      }
    }

    private static class readVerticeNode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVerticeNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVerticeNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVerticeNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readVerticeNode_result implements org.apache.thrift.TBase<readVerticeNode_result, readVerticeNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<readVerticeNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readVerticeNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readVerticeNode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readVerticeNode_resultTupleSchemeFactory();

    public java.util.List<Vertice> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readVerticeNode_result.class, metaDataMap);
    }

    public readVerticeNode_result() {
    }

    public readVerticeNode_result(
      java.util.List<Vertice> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readVerticeNode_result(readVerticeNode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Vertice> __this__success = new java.util.ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readVerticeNode_result deepCopy() {
      return new readVerticeNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public java.util.List<Vertice> getSuccess() {
      return this.success;
    }

    public readVerticeNode_result setSuccess(java.util.List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readVerticeNode_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readVerticeNode_result)
        return this.equals((readVerticeNode_result)that);
      return false;
    }

    public boolean equals(readVerticeNode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readVerticeNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readVerticeNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readVerticeNode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNode_resultStandardScheme getScheme() {
        return new readVerticeNode_resultStandardScheme();
      }
    }

    private static class readVerticeNode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readVerticeNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readVerticeNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Vertice>(_list74.size);
                  Vertice _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new Vertice();
                    _elem75.read(iprot);
                    struct.success.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readVerticeNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readVerticeNode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readVerticeNode_resultTupleScheme getScheme() {
        return new readVerticeNode_resultTupleScheme();
      }
    }

    private static class readVerticeNode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readVerticeNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readVerticeNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readVerticeNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Vertice>(_list79.size);
            Vertice _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new Vertice();
              _elem80.read(iprot);
              struct.success.add(_elem80);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readArestaNode_args implements org.apache.thrift.TBase<readArestaNode_args, readArestaNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<readArestaNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readArestaNode_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readArestaNode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readArestaNode_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readArestaNode_args.class, metaDataMap);
    }

    public readArestaNode_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readArestaNode_args(readArestaNode_args other) {
    }

    public readArestaNode_args deepCopy() {
      return new readArestaNode_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readArestaNode_args)
        return this.equals((readArestaNode_args)that);
      return false;
    }

    public boolean equals(readArestaNode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(readArestaNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readArestaNode_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readArestaNode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readArestaNode_argsStandardScheme getScheme() {
        return new readArestaNode_argsStandardScheme();
      }
    }

    private static class readArestaNode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<readArestaNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readArestaNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readArestaNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readArestaNode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readArestaNode_argsTupleScheme getScheme() {
        return new readArestaNode_argsTupleScheme();
      }
    }

    private static class readArestaNode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<readArestaNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readArestaNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readArestaNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class readArestaNode_result implements org.apache.thrift.TBase<readArestaNode_result, readArestaNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<readArestaNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readArestaNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new readArestaNode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new readArestaNode_resultTupleSchemeFactory();

    public java.util.List<Aresta> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aresta.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readArestaNode_result.class, metaDataMap);
    }

    public readArestaNode_result() {
    }

    public readArestaNode_result(
      java.util.List<Aresta> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readArestaNode_result(readArestaNode_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Aresta> __this__success = new java.util.ArrayList<Aresta>(other.success.size());
        for (Aresta other_element : other.success) {
          __this__success.add(new Aresta(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public readArestaNode_result deepCopy() {
      return new readArestaNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Aresta> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Aresta elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Aresta>();
      }
      this.success.add(elem);
    }

    public java.util.List<Aresta> getSuccess() {
      return this.success;
    }

    public readArestaNode_result setSuccess(java.util.List<Aresta> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public readArestaNode_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Aresta>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof readArestaNode_result)
        return this.equals((readArestaNode_result)that);
      return false;
    }

    public boolean equals(readArestaNode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(readArestaNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("readArestaNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readArestaNode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readArestaNode_resultStandardScheme getScheme() {
        return new readArestaNode_resultStandardScheme();
      }
    }

    private static class readArestaNode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<readArestaNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readArestaNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Aresta>(_list82.size);
                  Aresta _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new Aresta();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readArestaNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Aresta _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readArestaNode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public readArestaNode_resultTupleScheme getScheme() {
        return new readArestaNode_resultTupleScheme();
      }
    }

    private static class readArestaNode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<readArestaNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readArestaNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Aresta _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readArestaNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Aresta>(_list87.size);
            Aresta _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new Aresta();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class procuraMenorDistancia_args implements org.apache.thrift.TBase<procuraMenorDistancia_args, procuraMenorDistancia_args._Fields>, java.io.Serializable, Cloneable, Comparable<procuraMenorDistancia_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("procuraMenorDistancia_args");

    private static final org.apache.thrift.protocol.TField DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dist", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField VISITADO_FIELD_DESC = new org.apache.thrift.protocol.TField("visitado", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField VERTICES_FIELD_DESC = new org.apache.thrift.protocol.TField("vertices", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new procuraMenorDistancia_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new procuraMenorDistancia_argsTupleSchemeFactory();

    public java.util.Map<java.lang.Integer,java.lang.Double> dist; // required
    public java.util.Map<java.lang.Integer,java.lang.Integer> visitado; // required
    public java.util.List<Vertice> vertices; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIST((short)1, "dist"),
      VISITADO((short)2, "visitado"),
      VERTICES((short)3, "vertices");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIST
            return DIST;
          case 2: // VISITADO
            return VISITADO;
          case 3: // VERTICES
            return VERTICES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIST, new org.apache.thrift.meta_data.FieldMetaData("dist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.VISITADO, new org.apache.thrift.meta_data.FieldMetaData("visitado", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.VERTICES, new org.apache.thrift.meta_data.FieldMetaData("vertices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(procuraMenorDistancia_args.class, metaDataMap);
    }

    public procuraMenorDistancia_args() {
    }

    public procuraMenorDistancia_args(
      java.util.Map<java.lang.Integer,java.lang.Double> dist,
      java.util.Map<java.lang.Integer,java.lang.Integer> visitado,
      java.util.List<Vertice> vertices)
    {
      this();
      this.dist = dist;
      this.visitado = visitado;
      this.vertices = vertices;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public procuraMenorDistancia_args(procuraMenorDistancia_args other) {
      if (other.isSetDist()) {
        java.util.Map<java.lang.Integer,java.lang.Double> __this__dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(other.dist);
        this.dist = __this__dist;
      }
      if (other.isSetVisitado()) {
        java.util.Map<java.lang.Integer,java.lang.Integer> __this__visitado = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.visitado);
        this.visitado = __this__visitado;
      }
      if (other.isSetVertices()) {
        java.util.List<Vertice> __this__vertices = new java.util.ArrayList<Vertice>(other.vertices.size());
        for (Vertice other_element : other.vertices) {
          __this__vertices.add(new Vertice(other_element));
        }
        this.vertices = __this__vertices;
      }
    }

    public procuraMenorDistancia_args deepCopy() {
      return new procuraMenorDistancia_args(this);
    }

    @Override
    public void clear() {
      this.dist = null;
      this.visitado = null;
      this.vertices = null;
    }

    public int getDistSize() {
      return (this.dist == null) ? 0 : this.dist.size();
    }

    public void putToDist(int key, double val) {
      if (this.dist == null) {
        this.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>();
      }
      this.dist.put(key, val);
    }

    public java.util.Map<java.lang.Integer,java.lang.Double> getDist() {
      return this.dist;
    }

    public procuraMenorDistancia_args setDist(java.util.Map<java.lang.Integer,java.lang.Double> dist) {
      this.dist = dist;
      return this;
    }

    public void unsetDist() {
      this.dist = null;
    }

    /** Returns true if field dist is set (has been assigned a value) and false otherwise */
    public boolean isSetDist() {
      return this.dist != null;
    }

    public void setDistIsSet(boolean value) {
      if (!value) {
        this.dist = null;
      }
    }

    public int getVisitadoSize() {
      return (this.visitado == null) ? 0 : this.visitado.size();
    }

    public void putToVisitado(int key, int val) {
      if (this.visitado == null) {
        this.visitado = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
      }
      this.visitado.put(key, val);
    }

    public java.util.Map<java.lang.Integer,java.lang.Integer> getVisitado() {
      return this.visitado;
    }

    public procuraMenorDistancia_args setVisitado(java.util.Map<java.lang.Integer,java.lang.Integer> visitado) {
      this.visitado = visitado;
      return this;
    }

    public void unsetVisitado() {
      this.visitado = null;
    }

    /** Returns true if field visitado is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitado() {
      return this.visitado != null;
    }

    public void setVisitadoIsSet(boolean value) {
      if (!value) {
        this.visitado = null;
      }
    }

    public int getVerticesSize() {
      return (this.vertices == null) ? 0 : this.vertices.size();
    }

    public java.util.Iterator<Vertice> getVerticesIterator() {
      return (this.vertices == null) ? null : this.vertices.iterator();
    }

    public void addToVertices(Vertice elem) {
      if (this.vertices == null) {
        this.vertices = new java.util.ArrayList<Vertice>();
      }
      this.vertices.add(elem);
    }

    public java.util.List<Vertice> getVertices() {
      return this.vertices;
    }

    public procuraMenorDistancia_args setVertices(java.util.List<Vertice> vertices) {
      this.vertices = vertices;
      return this;
    }

    public void unsetVertices() {
      this.vertices = null;
    }

    /** Returns true if field vertices is set (has been assigned a value) and false otherwise */
    public boolean isSetVertices() {
      return this.vertices != null;
    }

    public void setVerticesIsSet(boolean value) {
      if (!value) {
        this.vertices = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DIST:
        if (value == null) {
          unsetDist();
        } else {
          setDist((java.util.Map<java.lang.Integer,java.lang.Double>)value);
        }
        break;

      case VISITADO:
        if (value == null) {
          unsetVisitado();
        } else {
          setVisitado((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
        }
        break;

      case VERTICES:
        if (value == null) {
          unsetVertices();
        } else {
          setVertices((java.util.List<Vertice>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DIST:
        return getDist();

      case VISITADO:
        return getVisitado();

      case VERTICES:
        return getVertices();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DIST:
        return isSetDist();
      case VISITADO:
        return isSetVisitado();
      case VERTICES:
        return isSetVertices();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof procuraMenorDistancia_args)
        return this.equals((procuraMenorDistancia_args)that);
      return false;
    }

    public boolean equals(procuraMenorDistancia_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dist = true && this.isSetDist();
      boolean that_present_dist = true && that.isSetDist();
      if (this_present_dist || that_present_dist) {
        if (!(this_present_dist && that_present_dist))
          return false;
        if (!this.dist.equals(that.dist))
          return false;
      }

      boolean this_present_visitado = true && this.isSetVisitado();
      boolean that_present_visitado = true && that.isSetVisitado();
      if (this_present_visitado || that_present_visitado) {
        if (!(this_present_visitado && that_present_visitado))
          return false;
        if (!this.visitado.equals(that.visitado))
          return false;
      }

      boolean this_present_vertices = true && this.isSetVertices();
      boolean that_present_vertices = true && that.isSetVertices();
      if (this_present_vertices || that_present_vertices) {
        if (!(this_present_vertices && that_present_vertices))
          return false;
        if (!this.vertices.equals(that.vertices))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDist()) ? 131071 : 524287);
      if (isSetDist())
        hashCode = hashCode * 8191 + dist.hashCode();

      hashCode = hashCode * 8191 + ((isSetVisitado()) ? 131071 : 524287);
      if (isSetVisitado())
        hashCode = hashCode * 8191 + visitado.hashCode();

      hashCode = hashCode * 8191 + ((isSetVertices()) ? 131071 : 524287);
      if (isSetVertices())
        hashCode = hashCode * 8191 + vertices.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(procuraMenorDistancia_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDist()).compareTo(other.isSetDist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dist, other.dist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVisitado()).compareTo(other.isSetVisitado());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitado()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitado, other.visitado);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVertices()).compareTo(other.isSetVertices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertices, other.vertices);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("procuraMenorDistancia_args(");
      boolean first = true;

      sb.append("dist:");
      if (this.dist == null) {
        sb.append("null");
      } else {
        sb.append(this.dist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitado:");
      if (this.visitado == null) {
        sb.append("null");
      } else {
        sb.append(this.visitado);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertices:");
      if (this.vertices == null) {
        sb.append("null");
      } else {
        sb.append(this.vertices);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class procuraMenorDistancia_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public procuraMenorDistancia_argsStandardScheme getScheme() {
        return new procuraMenorDistancia_argsStandardScheme();
      }
    }

    private static class procuraMenorDistancia_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<procuraMenorDistancia_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, procuraMenorDistancia_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
                  struct.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(2*_map90.size);
                  int _key91;
                  double _val92;
                  for (int _i93 = 0; _i93 < _map90.size; ++_i93)
                  {
                    _key91 = iprot.readI32();
                    _val92 = iprot.readDouble();
                    struct.dist.put(_key91, _val92);
                  }
                  iprot.readMapEnd();
                }
                struct.setDistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISITADO
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map94 = iprot.readMapBegin();
                  struct.visitado = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map94.size);
                  int _key95;
                  int _val96;
                  for (int _i97 = 0; _i97 < _map94.size; ++_i97)
                  {
                    _key95 = iprot.readI32();
                    _val96 = iprot.readI32();
                    struct.visitado.put(_key95, _val96);
                  }
                  iprot.readMapEnd();
                }
                struct.setVisitadoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTICES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.vertices = new java.util.ArrayList<Vertice>(_list98.size);
                  Vertice _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new Vertice();
                    _elem99.read(iprot);
                    struct.vertices.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setVerticesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, procuraMenorDistancia_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dist != null) {
          oprot.writeFieldBegin(DIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.dist.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter101 : struct.dist.entrySet())
            {
              oprot.writeI32(_iter101.getKey());
              oprot.writeDouble(_iter101.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.visitado != null) {
          oprot.writeFieldBegin(VISITADO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.visitado.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter102 : struct.visitado.entrySet())
            {
              oprot.writeI32(_iter102.getKey());
              oprot.writeI32(_iter102.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.vertices != null) {
          oprot.writeFieldBegin(VERTICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vertices.size()));
            for (Vertice _iter103 : struct.vertices)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class procuraMenorDistancia_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public procuraMenorDistancia_argsTupleScheme getScheme() {
        return new procuraMenorDistancia_argsTupleScheme();
      }
    }

    private static class procuraMenorDistancia_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<procuraMenorDistancia_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, procuraMenorDistancia_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDist()) {
          optionals.set(0);
        }
        if (struct.isSetVisitado()) {
          optionals.set(1);
        }
        if (struct.isSetVertices()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDist()) {
          {
            oprot.writeI32(struct.dist.size());
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter104 : struct.dist.entrySet())
            {
              oprot.writeI32(_iter104.getKey());
              oprot.writeDouble(_iter104.getValue());
            }
          }
        }
        if (struct.isSetVisitado()) {
          {
            oprot.writeI32(struct.visitado.size());
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter105 : struct.visitado.entrySet())
            {
              oprot.writeI32(_iter105.getKey());
              oprot.writeI32(_iter105.getValue());
            }
          }
        }
        if (struct.isSetVertices()) {
          {
            oprot.writeI32(struct.vertices.size());
            for (Vertice _iter106 : struct.vertices)
            {
              _iter106.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, procuraMenorDistancia_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map107 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(2*_map107.size);
            int _key108;
            double _val109;
            for (int _i110 = 0; _i110 < _map107.size; ++_i110)
            {
              _key108 = iprot.readI32();
              _val109 = iprot.readDouble();
              struct.dist.put(_key108, _val109);
            }
          }
          struct.setDistIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map111 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.visitado = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map111.size);
            int _key112;
            int _val113;
            for (int _i114 = 0; _i114 < _map111.size; ++_i114)
            {
              _key112 = iprot.readI32();
              _val113 = iprot.readI32();
              struct.visitado.put(_key112, _val113);
            }
          }
          struct.setVisitadoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.vertices = new java.util.ArrayList<Vertice>(_list115.size);
            Vertice _elem116;
            for (int _i117 = 0; _i117 < _list115.size; ++_i117)
            {
              _elem116 = new Vertice();
              _elem116.read(iprot);
              struct.vertices.add(_elem116);
            }
          }
          struct.setVerticesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class procuraMenorDistancia_result implements org.apache.thrift.TBase<procuraMenorDistancia_result, procuraMenorDistancia_result._Fields>, java.io.Serializable, Cloneable, Comparable<procuraMenorDistancia_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("procuraMenorDistancia_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new procuraMenorDistancia_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new procuraMenorDistancia_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(procuraMenorDistancia_result.class, metaDataMap);
    }

    public procuraMenorDistancia_result() {
    }

    public procuraMenorDistancia_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public procuraMenorDistancia_result(procuraMenorDistancia_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public procuraMenorDistancia_result deepCopy() {
      return new procuraMenorDistancia_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public procuraMenorDistancia_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof procuraMenorDistancia_result)
        return this.equals((procuraMenorDistancia_result)that);
      return false;
    }

    public boolean equals(procuraMenorDistancia_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(procuraMenorDistancia_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("procuraMenorDistancia_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class procuraMenorDistancia_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public procuraMenorDistancia_resultStandardScheme getScheme() {
        return new procuraMenorDistancia_resultStandardScheme();
      }
    }

    private static class procuraMenorDistancia_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<procuraMenorDistancia_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, procuraMenorDistancia_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, procuraMenorDistancia_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class procuraMenorDistancia_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public procuraMenorDistancia_resultTupleScheme getScheme() {
        return new procuraMenorDistancia_resultTupleScheme();
      }
    }

    private static class procuraMenorDistancia_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<procuraMenorDistancia_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, procuraMenorDistancia_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, procuraMenorDistancia_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class menorCaminho_args implements org.apache.thrift.TBase<menorCaminho_args, menorCaminho_args._Fields>, java.io.Serializable, Cloneable, Comparable<menorCaminho_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("menorCaminho_args");

    private static final org.apache.thrift.protocol.TField INI_FIELD_DESC = new org.apache.thrift.protocol.TField("ini", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FIM_FIELD_DESC = new org.apache.thrift.protocol.TField("fim", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ANT_FIELD_DESC = new org.apache.thrift.protocol.TField("ant", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dist", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new menorCaminho_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new menorCaminho_argsTupleSchemeFactory();

    public int ini; // required
    public int fim; // required
    public java.util.Map<java.lang.Integer,java.lang.Integer> ant; // required
    public java.util.Map<java.lang.Integer,java.lang.Double> dist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INI((short)1, "ini"),
      FIM((short)2, "fim"),
      ANT((short)3, "ant"),
      DIST((short)4, "dist");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INI
            return INI;
          case 2: // FIM
            return FIM;
          case 3: // ANT
            return ANT;
          case 4: // DIST
            return DIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INI_ISSET_ID = 0;
    private static final int __FIM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INI, new org.apache.thrift.meta_data.FieldMetaData("ini", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FIM, new org.apache.thrift.meta_data.FieldMetaData("fim", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ANT, new org.apache.thrift.meta_data.FieldMetaData("ant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.DIST, new org.apache.thrift.meta_data.FieldMetaData("dist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(menorCaminho_args.class, metaDataMap);
    }

    public menorCaminho_args() {
    }

    public menorCaminho_args(
      int ini,
      int fim,
      java.util.Map<java.lang.Integer,java.lang.Integer> ant,
      java.util.Map<java.lang.Integer,java.lang.Double> dist)
    {
      this();
      this.ini = ini;
      setIniIsSet(true);
      this.fim = fim;
      setFimIsSet(true);
      this.ant = ant;
      this.dist = dist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public menorCaminho_args(menorCaminho_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ini = other.ini;
      this.fim = other.fim;
      if (other.isSetAnt()) {
        java.util.Map<java.lang.Integer,java.lang.Integer> __this__ant = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.ant);
        this.ant = __this__ant;
      }
      if (other.isSetDist()) {
        java.util.Map<java.lang.Integer,java.lang.Double> __this__dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(other.dist);
        this.dist = __this__dist;
      }
    }

    public menorCaminho_args deepCopy() {
      return new menorCaminho_args(this);
    }

    @Override
    public void clear() {
      setIniIsSet(false);
      this.ini = 0;
      setFimIsSet(false);
      this.fim = 0;
      this.ant = null;
      this.dist = null;
    }

    public int getIni() {
      return this.ini;
    }

    public menorCaminho_args setIni(int ini) {
      this.ini = ini;
      setIniIsSet(true);
      return this;
    }

    public void unsetIni() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INI_ISSET_ID);
    }

    /** Returns true if field ini is set (has been assigned a value) and false otherwise */
    public boolean isSetIni() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INI_ISSET_ID);
    }

    public void setIniIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INI_ISSET_ID, value);
    }

    public int getFim() {
      return this.fim;
    }

    public menorCaminho_args setFim(int fim) {
      this.fim = fim;
      setFimIsSet(true);
      return this;
    }

    public void unsetFim() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIM_ISSET_ID);
    }

    /** Returns true if field fim is set (has been assigned a value) and false otherwise */
    public boolean isSetFim() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIM_ISSET_ID);
    }

    public void setFimIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIM_ISSET_ID, value);
    }

    public int getAntSize() {
      return (this.ant == null) ? 0 : this.ant.size();
    }

    public void putToAnt(int key, int val) {
      if (this.ant == null) {
        this.ant = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
      }
      this.ant.put(key, val);
    }

    public java.util.Map<java.lang.Integer,java.lang.Integer> getAnt() {
      return this.ant;
    }

    public menorCaminho_args setAnt(java.util.Map<java.lang.Integer,java.lang.Integer> ant) {
      this.ant = ant;
      return this;
    }

    public void unsetAnt() {
      this.ant = null;
    }

    /** Returns true if field ant is set (has been assigned a value) and false otherwise */
    public boolean isSetAnt() {
      return this.ant != null;
    }

    public void setAntIsSet(boolean value) {
      if (!value) {
        this.ant = null;
      }
    }

    public int getDistSize() {
      return (this.dist == null) ? 0 : this.dist.size();
    }

    public void putToDist(int key, double val) {
      if (this.dist == null) {
        this.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>();
      }
      this.dist.put(key, val);
    }

    public java.util.Map<java.lang.Integer,java.lang.Double> getDist() {
      return this.dist;
    }

    public menorCaminho_args setDist(java.util.Map<java.lang.Integer,java.lang.Double> dist) {
      this.dist = dist;
      return this;
    }

    public void unsetDist() {
      this.dist = null;
    }

    /** Returns true if field dist is set (has been assigned a value) and false otherwise */
    public boolean isSetDist() {
      return this.dist != null;
    }

    public void setDistIsSet(boolean value) {
      if (!value) {
        this.dist = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INI:
        if (value == null) {
          unsetIni();
        } else {
          setIni((java.lang.Integer)value);
        }
        break;

      case FIM:
        if (value == null) {
          unsetFim();
        } else {
          setFim((java.lang.Integer)value);
        }
        break;

      case ANT:
        if (value == null) {
          unsetAnt();
        } else {
          setAnt((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
        }
        break;

      case DIST:
        if (value == null) {
          unsetDist();
        } else {
          setDist((java.util.Map<java.lang.Integer,java.lang.Double>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INI:
        return getIni();

      case FIM:
        return getFim();

      case ANT:
        return getAnt();

      case DIST:
        return getDist();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INI:
        return isSetIni();
      case FIM:
        return isSetFim();
      case ANT:
        return isSetAnt();
      case DIST:
        return isSetDist();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof menorCaminho_args)
        return this.equals((menorCaminho_args)that);
      return false;
    }

    public boolean equals(menorCaminho_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ini = true;
      boolean that_present_ini = true;
      if (this_present_ini || that_present_ini) {
        if (!(this_present_ini && that_present_ini))
          return false;
        if (this.ini != that.ini)
          return false;
      }

      boolean this_present_fim = true;
      boolean that_present_fim = true;
      if (this_present_fim || that_present_fim) {
        if (!(this_present_fim && that_present_fim))
          return false;
        if (this.fim != that.fim)
          return false;
      }

      boolean this_present_ant = true && this.isSetAnt();
      boolean that_present_ant = true && that.isSetAnt();
      if (this_present_ant || that_present_ant) {
        if (!(this_present_ant && that_present_ant))
          return false;
        if (!this.ant.equals(that.ant))
          return false;
      }

      boolean this_present_dist = true && this.isSetDist();
      boolean that_present_dist = true && that.isSetDist();
      if (this_present_dist || that_present_dist) {
        if (!(this_present_dist && that_present_dist))
          return false;
        if (!this.dist.equals(that.dist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ini;

      hashCode = hashCode * 8191 + fim;

      hashCode = hashCode * 8191 + ((isSetAnt()) ? 131071 : 524287);
      if (isSetAnt())
        hashCode = hashCode * 8191 + ant.hashCode();

      hashCode = hashCode * 8191 + ((isSetDist()) ? 131071 : 524287);
      if (isSetDist())
        hashCode = hashCode * 8191 + dist.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(menorCaminho_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIni()).compareTo(other.isSetIni());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIni()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ini, other.ini);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFim()).compareTo(other.isSetFim());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFim()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fim, other.fim);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAnt()).compareTo(other.isSetAnt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ant, other.ant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDist()).compareTo(other.isSetDist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dist, other.dist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("menorCaminho_args(");
      boolean first = true;

      sb.append("ini:");
      sb.append(this.ini);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fim:");
      sb.append(this.fim);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ant:");
      if (this.ant == null) {
        sb.append("null");
      } else {
        sb.append(this.ant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dist:");
      if (this.dist == null) {
        sb.append("null");
      } else {
        sb.append(this.dist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class menorCaminho_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public menorCaminho_argsStandardScheme getScheme() {
        return new menorCaminho_argsStandardScheme();
      }
    }

    private static class menorCaminho_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<menorCaminho_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, menorCaminho_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INI
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ini = iprot.readI32();
                struct.setIniIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FIM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fim = iprot.readI32();
                struct.setFimIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ANT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                  struct.ant = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map118.size);
                  int _key119;
                  int _val120;
                  for (int _i121 = 0; _i121 < _map118.size; ++_i121)
                  {
                    _key119 = iprot.readI32();
                    _val120 = iprot.readI32();
                    struct.ant.put(_key119, _val120);
                  }
                  iprot.readMapEnd();
                }
                struct.setAntIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DIST
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin();
                  struct.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(2*_map122.size);
                  int _key123;
                  double _val124;
                  for (int _i125 = 0; _i125 < _map122.size; ++_i125)
                  {
                    _key123 = iprot.readI32();
                    _val124 = iprot.readDouble();
                    struct.dist.put(_key123, _val124);
                  }
                  iprot.readMapEnd();
                }
                struct.setDistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, menorCaminho_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INI_FIELD_DESC);
        oprot.writeI32(struct.ini);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FIM_FIELD_DESC);
        oprot.writeI32(struct.fim);
        oprot.writeFieldEnd();
        if (struct.ant != null) {
          oprot.writeFieldBegin(ANT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.ant.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter126 : struct.ant.entrySet())
            {
              oprot.writeI32(_iter126.getKey());
              oprot.writeI32(_iter126.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.dist != null) {
          oprot.writeFieldBegin(DIST_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.dist.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter127 : struct.dist.entrySet())
            {
              oprot.writeI32(_iter127.getKey());
              oprot.writeDouble(_iter127.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class menorCaminho_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public menorCaminho_argsTupleScheme getScheme() {
        return new menorCaminho_argsTupleScheme();
      }
    }

    private static class menorCaminho_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<menorCaminho_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, menorCaminho_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIni()) {
          optionals.set(0);
        }
        if (struct.isSetFim()) {
          optionals.set(1);
        }
        if (struct.isSetAnt()) {
          optionals.set(2);
        }
        if (struct.isSetDist()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIni()) {
          oprot.writeI32(struct.ini);
        }
        if (struct.isSetFim()) {
          oprot.writeI32(struct.fim);
        }
        if (struct.isSetAnt()) {
          {
            oprot.writeI32(struct.ant.size());
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter128 : struct.ant.entrySet())
            {
              oprot.writeI32(_iter128.getKey());
              oprot.writeI32(_iter128.getValue());
            }
          }
        }
        if (struct.isSetDist()) {
          {
            oprot.writeI32(struct.dist.size());
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> _iter129 : struct.dist.entrySet())
            {
              oprot.writeI32(_iter129.getKey());
              oprot.writeDouble(_iter129.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, menorCaminho_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ini = iprot.readI32();
          struct.setIniIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fim = iprot.readI32();
          struct.setFimIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map130 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ant = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map130.size);
            int _key131;
            int _val132;
            for (int _i133 = 0; _i133 < _map130.size; ++_i133)
            {
              _key131 = iprot.readI32();
              _val132 = iprot.readI32();
              struct.ant.put(_key131, _val132);
            }
          }
          struct.setAntIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map134 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.dist = new java.util.HashMap<java.lang.Integer,java.lang.Double>(2*_map134.size);
            int _key135;
            double _val136;
            for (int _i137 = 0; _i137 < _map134.size; ++_i137)
            {
              _key135 = iprot.readI32();
              _val136 = iprot.readDouble();
              struct.dist.put(_key135, _val136);
            }
          }
          struct.setDistIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class menorCaminho_result implements org.apache.thrift.TBase<menorCaminho_result, menorCaminho_result._Fields>, java.io.Serializable, Cloneable, Comparable<menorCaminho_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("menorCaminho_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new menorCaminho_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new menorCaminho_resultTupleSchemeFactory();

    public java.util.List<Vertice> success; // required
    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertice.class))));
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(menorCaminho_result.class, metaDataMap);
    }

    public menorCaminho_result() {
    }

    public menorCaminho_result(
      java.util.List<Vertice> success,
      KeyNotFound knf)
    {
      this();
      this.success = success;
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public menorCaminho_result(menorCaminho_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Vertice> __this__success = new java.util.ArrayList<Vertice>(other.success.size());
        for (Vertice other_element : other.success) {
          __this__success.add(new Vertice(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public menorCaminho_result deepCopy() {
      return new menorCaminho_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.knf = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertice> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertice elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Vertice>();
      }
      this.success.add(elem);
    }

    public java.util.List<Vertice> getSuccess() {
      return this.success;
    }

    public menorCaminho_result setSuccess(java.util.List<Vertice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public menorCaminho_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Vertice>)value);
        }
        break;

      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof menorCaminho_result)
        return this.equals((menorCaminho_result)that);
      return false;
    }

    public boolean equals(menorCaminho_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(menorCaminho_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("menorCaminho_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class menorCaminho_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public menorCaminho_resultStandardScheme getScheme() {
        return new menorCaminho_resultStandardScheme();
      }
    }

    private static class menorCaminho_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<menorCaminho_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, menorCaminho_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Vertice>(_list138.size);
                  Vertice _elem139;
                  for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                  {
                    _elem139 = new Vertice();
                    _elem139.read(iprot);
                    struct.success.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, menorCaminho_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertice _iter141 : struct.success)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class menorCaminho_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public menorCaminho_resultTupleScheme getScheme() {
        return new menorCaminho_resultTupleScheme();
      }
    }

    private static class menorCaminho_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<menorCaminho_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, menorCaminho_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKnf()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertice _iter142 : struct.success)
            {
              _iter142.write(oprot);
            }
          }
        }
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, menorCaminho_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Vertice>(_list143.size);
            Vertice _elem144;
            for (int _i145 = 0; _i145 < _list143.size; ++_i145)
            {
              _elem144 = new Vertice();
              _elem144.read(iprot);
              struct.success.add(_elem144);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stabilizeCluster_args implements org.apache.thrift.TBase<stabilizeCluster_args, stabilizeCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<stabilizeCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stabilizeCluster_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stabilizeCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stabilizeCluster_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stabilizeCluster_args.class, metaDataMap);
    }

    public stabilizeCluster_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stabilizeCluster_args(stabilizeCluster_args other) {
    }

    public stabilizeCluster_args deepCopy() {
      return new stabilizeCluster_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof stabilizeCluster_args)
        return this.equals((stabilizeCluster_args)that);
      return false;
    }

    public boolean equals(stabilizeCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(stabilizeCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stabilizeCluster_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stabilizeCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stabilizeCluster_argsStandardScheme getScheme() {
        return new stabilizeCluster_argsStandardScheme();
      }
    }

    private static class stabilizeCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<stabilizeCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stabilizeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stabilizeCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stabilizeCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stabilizeCluster_argsTupleScheme getScheme() {
        return new stabilizeCluster_argsTupleScheme();
      }
    }

    private static class stabilizeCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stabilizeCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stabilizeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stabilizeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stabilizeCluster_result implements org.apache.thrift.TBase<stabilizeCluster_result, stabilizeCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<stabilizeCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stabilizeCluster_result");

    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stabilizeCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stabilizeCluster_resultTupleSchemeFactory();

    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stabilizeCluster_result.class, metaDataMap);
    }

    public stabilizeCluster_result() {
    }

    public stabilizeCluster_result(
      KeyNotFound knf)
    {
      this();
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stabilizeCluster_result(stabilizeCluster_result other) {
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public stabilizeCluster_result deepCopy() {
      return new stabilizeCluster_result(this);
    }

    @Override
    public void clear() {
      this.knf = null;
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public stabilizeCluster_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof stabilizeCluster_result)
        return this.equals((stabilizeCluster_result)that);
      return false;
    }

    public boolean equals(stabilizeCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stabilizeCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stabilizeCluster_result(");
      boolean first = true;

      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stabilizeCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stabilizeCluster_resultStandardScheme getScheme() {
        return new stabilizeCluster_resultStandardScheme();
      }
    }

    private static class stabilizeCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<stabilizeCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stabilizeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stabilizeCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stabilizeCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stabilizeCluster_resultTupleScheme getScheme() {
        return new stabilizeCluster_resultTupleScheme();
      }
    }

    private static class stabilizeCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<stabilizeCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stabilizeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKnf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stabilizeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setCluster_args implements org.apache.thrift.TBase<setCluster_args, setCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCluster_argsTupleSchemeFactory();

    public java.util.List<Finger> cluster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER((short)1, "cluster");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER
            return CLUSTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCluster_args.class, metaDataMap);
    }

    public setCluster_args() {
    }

    public setCluster_args(
      java.util.List<Finger> cluster)
    {
      this();
      this.cluster = cluster;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCluster_args(setCluster_args other) {
      if (other.isSetCluster()) {
        java.util.List<Finger> __this__cluster = new java.util.ArrayList<Finger>(other.cluster.size());
        for (Finger other_element : other.cluster) {
          __this__cluster.add(new Finger(other_element));
        }
        this.cluster = __this__cluster;
      }
    }

    public setCluster_args deepCopy() {
      return new setCluster_args(this);
    }

    @Override
    public void clear() {
      this.cluster = null;
    }

    public int getClusterSize() {
      return (this.cluster == null) ? 0 : this.cluster.size();
    }

    public java.util.Iterator<Finger> getClusterIterator() {
      return (this.cluster == null) ? null : this.cluster.iterator();
    }

    public void addToCluster(Finger elem) {
      if (this.cluster == null) {
        this.cluster = new java.util.ArrayList<Finger>();
      }
      this.cluster.add(elem);
    }

    public java.util.List<Finger> getCluster() {
      return this.cluster;
    }

    public setCluster_args setCluster(java.util.List<Finger> cluster) {
      this.cluster = cluster;
      return this;
    }

    public void unsetCluster() {
      this.cluster = null;
    }

    /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
    public boolean isSetCluster() {
      return this.cluster != null;
    }

    public void setClusterIsSet(boolean value) {
      if (!value) {
        this.cluster = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLUSTER:
        if (value == null) {
          unsetCluster();
        } else {
          setCluster((java.util.List<Finger>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER:
        return getCluster();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER:
        return isSetCluster();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setCluster_args)
        return this.equals((setCluster_args)that);
      return false;
    }

    public boolean equals(setCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cluster = true && this.isSetCluster();
      boolean that_present_cluster = true && that.isSetCluster();
      if (this_present_cluster || that_present_cluster) {
        if (!(this_present_cluster && that_present_cluster))
          return false;
        if (!this.cluster.equals(that.cluster))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
      if (isSetCluster())
        hashCode = hashCode * 8191 + cluster.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCluster()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setCluster_args(");
      boolean first = true;

      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setCluster_argsStandardScheme getScheme() {
        return new setCluster_argsStandardScheme();
      }
    }

    private static class setCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.cluster = new java.util.ArrayList<Finger>(_list146.size);
                  Finger _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = new Finger();
                    _elem147.read(iprot);
                    struct.cluster.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setClusterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cluster != null) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cluster.size()));
            for (Finger _iter149 : struct.cluster)
            {
              _iter149.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setCluster_argsTupleScheme getScheme() {
        return new setCluster_argsTupleScheme();
      }
    }

    private static class setCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCluster()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCluster()) {
          {
            oprot.writeI32(struct.cluster.size());
            for (Finger _iter150 : struct.cluster)
            {
              _iter150.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.cluster = new java.util.ArrayList<Finger>(_list151.size);
            Finger _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = new Finger();
              _elem152.read(iprot);
              struct.cluster.add(_elem152);
            }
          }
          struct.setClusterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setCluster_result implements org.apache.thrift.TBase<setCluster_result, setCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCluster_result");

    private static final org.apache.thrift.protocol.TField KNF_FIELD_DESC = new org.apache.thrift.protocol.TField("knf", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCluster_resultTupleSchemeFactory();

    public KeyNotFound knf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNF((short)1, "knf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNF
            return KNF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNF, new org.apache.thrift.meta_data.FieldMetaData("knf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyNotFound.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCluster_result.class, metaDataMap);
    }

    public setCluster_result() {
    }

    public setCluster_result(
      KeyNotFound knf)
    {
      this();
      this.knf = knf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCluster_result(setCluster_result other) {
      if (other.isSetKnf()) {
        this.knf = new KeyNotFound(other.knf);
      }
    }

    public setCluster_result deepCopy() {
      return new setCluster_result(this);
    }

    @Override
    public void clear() {
      this.knf = null;
    }

    public KeyNotFound getKnf() {
      return this.knf;
    }

    public setCluster_result setKnf(KeyNotFound knf) {
      this.knf = knf;
      return this;
    }

    public void unsetKnf() {
      this.knf = null;
    }

    /** Returns true if field knf is set (has been assigned a value) and false otherwise */
    public boolean isSetKnf() {
      return this.knf != null;
    }

    public void setKnfIsSet(boolean value) {
      if (!value) {
        this.knf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case KNF:
        if (value == null) {
          unsetKnf();
        } else {
          setKnf((KeyNotFound)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case KNF:
        return getKnf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case KNF:
        return isSetKnf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setCluster_result)
        return this.equals((setCluster_result)that);
      return false;
    }

    public boolean equals(setCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_knf = true && this.isSetKnf();
      boolean that_present_knf = true && that.isSetKnf();
      if (this_present_knf || that_present_knf) {
        if (!(this_present_knf && that_present_knf))
          return false;
        if (!this.knf.equals(that.knf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKnf()) ? 131071 : 524287);
      if (isSetKnf())
        hashCode = hashCode * 8191 + knf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetKnf()).compareTo(other.isSetKnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knf, other.knf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setCluster_result(");
      boolean first = true;

      sb.append("knf:");
      if (this.knf == null) {
        sb.append("null");
      } else {
        sb.append(this.knf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setCluster_resultStandardScheme getScheme() {
        return new setCluster_resultStandardScheme();
      }
    }

    private static class setCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.knf = new KeyNotFound();
                struct.knf.read(iprot);
                struct.setKnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knf != null) {
          oprot.writeFieldBegin(KNF_FIELD_DESC);
          struct.knf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setCluster_resultTupleScheme getScheme() {
        return new setCluster_resultTupleScheme();
      }
    }

    private static class setCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKnf()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnf()) {
          struct.knf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.knf = new KeyNotFound();
          struct.knf.read(iprot);
          struct.setKnfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
