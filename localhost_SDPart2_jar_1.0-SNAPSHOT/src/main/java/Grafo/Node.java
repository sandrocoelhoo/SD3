/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Grafo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Node implements org.apache.thrift.TBase<Node, Node._Fields>, java.io.Serializable, Cloneable, Comparable<Node> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Node");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FT_FIELD_DESC = new org.apache.thrift.protocol.TField("ft", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PRED_FIELD_DESC = new org.apache.thrift.protocol.TField("pred", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IP_RAFT_RAIZ_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRaftRaiz", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PORTA_RAFT_RAIZ_FIELD_DESC = new org.apache.thrift.protocol.TField("portaRaftRaiz", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PORTA_RAFT_FIELD_DESC = new org.apache.thrift.protocol.TField("portaRaft", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ID_RAFT_RAIZ_FIELD_DESC = new org.apache.thrift.protocol.TField("idRaftRaiz", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeTupleSchemeFactory());
  }

  public int id; // required
  public List<List<Finger>> ft; // required
  public Finger pred; // required
  public String ip; // required
  public int port; // required
  public String ipRaftRaiz; // required
  public int portaRaftRaiz; // required
  public int portaRaft; // required
  public List<Finger> cluster; // required
  public int idRaftRaiz; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FT((short)2, "ft"),
    PRED((short)3, "pred"),
    IP((short)4, "ip"),
    PORT((short)5, "port"),
    IP_RAFT_RAIZ((short)6, "ipRaftRaiz"),
    PORTA_RAFT_RAIZ((short)7, "portaRaftRaiz"),
    PORTA_RAFT((short)8, "portaRaft"),
    CLUSTER((short)9, "cluster"),
    ID_RAFT_RAIZ((short)10, "idRaftRaiz");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FT
          return FT;
        case 3: // PRED
          return PRED;
        case 4: // IP
          return IP;
        case 5: // PORT
          return PORT;
        case 6: // IP_RAFT_RAIZ
          return IP_RAFT_RAIZ;
        case 7: // PORTA_RAFT_RAIZ
          return PORTA_RAFT_RAIZ;
        case 8: // PORTA_RAFT
          return PORTA_RAFT;
        case 9: // CLUSTER
          return CLUSTER;
        case 10: // ID_RAFT_RAIZ
          return ID_RAFT_RAIZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private static final int __PORTARAFTRAIZ_ISSET_ID = 2;
  private static final int __PORTARAFT_ISSET_ID = 3;
  private static final int __IDRAFTRAIZ_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT, new org.apache.thrift.meta_data.FieldMetaData("ft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class)))));
    tmpMap.put(_Fields.PRED, new org.apache.thrift.meta_data.FieldMetaData("pred", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_RAFT_RAIZ, new org.apache.thrift.meta_data.FieldMetaData("ipRaftRaiz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORTA_RAFT_RAIZ, new org.apache.thrift.meta_data.FieldMetaData("portaRaftRaiz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORTA_RAFT, new org.apache.thrift.meta_data.FieldMetaData("portaRaft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Finger.class))));
    tmpMap.put(_Fields.ID_RAFT_RAIZ, new org.apache.thrift.meta_data.FieldMetaData("idRaftRaiz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Node.class, metaDataMap);
  }

  public Node() {
  }

  public Node(
    int id,
    List<List<Finger>> ft,
    Finger pred,
    String ip,
    int port,
    String ipRaftRaiz,
    int portaRaftRaiz,
    int portaRaft,
    List<Finger> cluster,
    int idRaftRaiz)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.ft = ft;
    this.pred = pred;
    this.ip = ip;
    this.port = port;
    setPortIsSet(true);
    this.ipRaftRaiz = ipRaftRaiz;
    this.portaRaftRaiz = portaRaftRaiz;
    setPortaRaftRaizIsSet(true);
    this.portaRaft = portaRaft;
    setPortaRaftIsSet(true);
    this.cluster = cluster;
    this.idRaftRaiz = idRaftRaiz;
    setIdRaftRaizIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Node(Node other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFt()) {
      List<List<Finger>> __this__ft = new ArrayList<List<Finger>>(other.ft.size());
      for (List<Finger> other_element : other.ft) {
        List<Finger> __this__ft_copy = new ArrayList<Finger>(other_element.size());
        for (Finger other_element_element : other_element) {
          __this__ft_copy.add(new Finger(other_element_element));
        }
        __this__ft.add(__this__ft_copy);
      }
      this.ft = __this__ft;
    }
    if (other.isSetPred()) {
      this.pred = new Finger(other.pred);
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    if (other.isSetIpRaftRaiz()) {
      this.ipRaftRaiz = other.ipRaftRaiz;
    }
    this.portaRaftRaiz = other.portaRaftRaiz;
    this.portaRaft = other.portaRaft;
    if (other.isSetCluster()) {
      List<Finger> __this__cluster = new ArrayList<Finger>(other.cluster.size());
      for (Finger other_element : other.cluster) {
        __this__cluster.add(new Finger(other_element));
      }
      this.cluster = __this__cluster;
    }
    this.idRaftRaiz = other.idRaftRaiz;
  }

  public Node deepCopy() {
    return new Node(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.ft = null;
    this.pred = null;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    this.ipRaftRaiz = null;
    setPortaRaftRaizIsSet(false);
    this.portaRaftRaiz = 0;
    setPortaRaftIsSet(false);
    this.portaRaft = 0;
    this.cluster = null;
    setIdRaftRaizIsSet(false);
    this.idRaftRaiz = 0;
  }

  public int getId() {
    return this.id;
  }

  public Node setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getFtSize() {
    return (this.ft == null) ? 0 : this.ft.size();
  }

  public java.util.Iterator<List<Finger>> getFtIterator() {
    return (this.ft == null) ? null : this.ft.iterator();
  }

  public void addToFt(List<Finger> elem) {
    if (this.ft == null) {
      this.ft = new ArrayList<List<Finger>>();
    }
    this.ft.add(elem);
  }

  public List<List<Finger>> getFt() {
    return this.ft;
  }

  public Node setFt(List<List<Finger>> ft) {
    this.ft = ft;
    return this;
  }

  public void unsetFt() {
    this.ft = null;
  }

  /** Returns true if field ft is set (has been assigned a value) and false otherwise */
  public boolean isSetFt() {
    return this.ft != null;
  }

  public void setFtIsSet(boolean value) {
    if (!value) {
      this.ft = null;
    }
  }

  public Finger getPred() {
    return this.pred;
  }

  public Node setPred(Finger pred) {
    this.pred = pred;
    return this;
  }

  public void unsetPred() {
    this.pred = null;
  }

  /** Returns true if field pred is set (has been assigned a value) and false otherwise */
  public boolean isSetPred() {
    return this.pred != null;
  }

  public void setPredIsSet(boolean value) {
    if (!value) {
      this.pred = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public Node setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public Node setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getIpRaftRaiz() {
    return this.ipRaftRaiz;
  }

  public Node setIpRaftRaiz(String ipRaftRaiz) {
    this.ipRaftRaiz = ipRaftRaiz;
    return this;
  }

  public void unsetIpRaftRaiz() {
    this.ipRaftRaiz = null;
  }

  /** Returns true if field ipRaftRaiz is set (has been assigned a value) and false otherwise */
  public boolean isSetIpRaftRaiz() {
    return this.ipRaftRaiz != null;
  }

  public void setIpRaftRaizIsSet(boolean value) {
    if (!value) {
      this.ipRaftRaiz = null;
    }
  }

  public int getPortaRaftRaiz() {
    return this.portaRaftRaiz;
  }

  public Node setPortaRaftRaiz(int portaRaftRaiz) {
    this.portaRaftRaiz = portaRaftRaiz;
    setPortaRaftRaizIsSet(true);
    return this;
  }

  public void unsetPortaRaftRaiz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTARAFTRAIZ_ISSET_ID);
  }

  /** Returns true if field portaRaftRaiz is set (has been assigned a value) and false otherwise */
  public boolean isSetPortaRaftRaiz() {
    return EncodingUtils.testBit(__isset_bitfield, __PORTARAFTRAIZ_ISSET_ID);
  }

  public void setPortaRaftRaizIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTARAFTRAIZ_ISSET_ID, value);
  }

  public int getPortaRaft() {
    return this.portaRaft;
  }

  public Node setPortaRaft(int portaRaft) {
    this.portaRaft = portaRaft;
    setPortaRaftIsSet(true);
    return this;
  }

  public void unsetPortaRaft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTARAFT_ISSET_ID);
  }

  /** Returns true if field portaRaft is set (has been assigned a value) and false otherwise */
  public boolean isSetPortaRaft() {
    return EncodingUtils.testBit(__isset_bitfield, __PORTARAFT_ISSET_ID);
  }

  public void setPortaRaftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTARAFT_ISSET_ID, value);
  }

  public int getClusterSize() {
    return (this.cluster == null) ? 0 : this.cluster.size();
  }

  public java.util.Iterator<Finger> getClusterIterator() {
    return (this.cluster == null) ? null : this.cluster.iterator();
  }

  public void addToCluster(Finger elem) {
    if (this.cluster == null) {
      this.cluster = new ArrayList<Finger>();
    }
    this.cluster.add(elem);
  }

  public List<Finger> getCluster() {
    return this.cluster;
  }

  public Node setCluster(List<Finger> cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public int getIdRaftRaiz() {
    return this.idRaftRaiz;
  }

  public Node setIdRaftRaiz(int idRaftRaiz) {
    this.idRaftRaiz = idRaftRaiz;
    setIdRaftRaizIsSet(true);
    return this;
  }

  public void unsetIdRaftRaiz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDRAFTRAIZ_ISSET_ID);
  }

  /** Returns true if field idRaftRaiz is set (has been assigned a value) and false otherwise */
  public boolean isSetIdRaftRaiz() {
    return EncodingUtils.testBit(__isset_bitfield, __IDRAFTRAIZ_ISSET_ID);
  }

  public void setIdRaftRaizIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDRAFTRAIZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FT:
      if (value == null) {
        unsetFt();
      } else {
        setFt((List<List<Finger>>)value);
      }
      break;

    case PRED:
      if (value == null) {
        unsetPred();
      } else {
        setPred((Finger)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case IP_RAFT_RAIZ:
      if (value == null) {
        unsetIpRaftRaiz();
      } else {
        setIpRaftRaiz((String)value);
      }
      break;

    case PORTA_RAFT_RAIZ:
      if (value == null) {
        unsetPortaRaftRaiz();
      } else {
        setPortaRaftRaiz((Integer)value);
      }
      break;

    case PORTA_RAFT:
      if (value == null) {
        unsetPortaRaft();
      } else {
        setPortaRaft((Integer)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((List<Finger>)value);
      }
      break;

    case ID_RAFT_RAIZ:
      if (value == null) {
        unsetIdRaftRaiz();
      } else {
        setIdRaftRaiz((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case FT:
      return getFt();

    case PRED:
      return getPred();

    case IP:
      return getIp();

    case PORT:
      return Integer.valueOf(getPort());

    case IP_RAFT_RAIZ:
      return getIpRaftRaiz();

    case PORTA_RAFT_RAIZ:
      return Integer.valueOf(getPortaRaftRaiz());

    case PORTA_RAFT:
      return Integer.valueOf(getPortaRaft());

    case CLUSTER:
      return getCluster();

    case ID_RAFT_RAIZ:
      return Integer.valueOf(getIdRaftRaiz());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FT:
      return isSetFt();
    case PRED:
      return isSetPred();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case IP_RAFT_RAIZ:
      return isSetIpRaftRaiz();
    case PORTA_RAFT_RAIZ:
      return isSetPortaRaftRaiz();
    case PORTA_RAFT:
      return isSetPortaRaft();
    case CLUSTER:
      return isSetCluster();
    case ID_RAFT_RAIZ:
      return isSetIdRaftRaiz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Node)
      return this.equals((Node)that);
    return false;
  }

  public boolean equals(Node that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_ft = true && this.isSetFt();
    boolean that_present_ft = true && that.isSetFt();
    if (this_present_ft || that_present_ft) {
      if (!(this_present_ft && that_present_ft))
        return false;
      if (!this.ft.equals(that.ft))
        return false;
    }

    boolean this_present_pred = true && this.isSetPred();
    boolean that_present_pred = true && that.isSetPred();
    if (this_present_pred || that_present_pred) {
      if (!(this_present_pred && that_present_pred))
        return false;
      if (!this.pred.equals(that.pred))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_ipRaftRaiz = true && this.isSetIpRaftRaiz();
    boolean that_present_ipRaftRaiz = true && that.isSetIpRaftRaiz();
    if (this_present_ipRaftRaiz || that_present_ipRaftRaiz) {
      if (!(this_present_ipRaftRaiz && that_present_ipRaftRaiz))
        return false;
      if (!this.ipRaftRaiz.equals(that.ipRaftRaiz))
        return false;
    }

    boolean this_present_portaRaftRaiz = true;
    boolean that_present_portaRaftRaiz = true;
    if (this_present_portaRaftRaiz || that_present_portaRaftRaiz) {
      if (!(this_present_portaRaftRaiz && that_present_portaRaftRaiz))
        return false;
      if (this.portaRaftRaiz != that.portaRaftRaiz)
        return false;
    }

    boolean this_present_portaRaft = true;
    boolean that_present_portaRaft = true;
    if (this_present_portaRaft || that_present_portaRaft) {
      if (!(this_present_portaRaft && that_present_portaRaft))
        return false;
      if (this.portaRaft != that.portaRaft)
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_idRaftRaiz = true;
    boolean that_present_idRaftRaiz = true;
    if (this_present_idRaftRaiz || that_present_idRaftRaiz) {
      if (!(this_present_idRaftRaiz && that_present_idRaftRaiz))
        return false;
      if (this.idRaftRaiz != that.idRaftRaiz)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Node other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFt()).compareTo(other.isSetFt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft, other.ft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPred()).compareTo(other.isSetPred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pred, other.pred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpRaftRaiz()).compareTo(other.isSetIpRaftRaiz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpRaftRaiz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRaftRaiz, other.ipRaftRaiz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortaRaftRaiz()).compareTo(other.isSetPortaRaftRaiz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortaRaftRaiz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portaRaftRaiz, other.portaRaftRaiz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPortaRaft()).compareTo(other.isSetPortaRaft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortaRaft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portaRaft, other.portaRaft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCluster()).compareTo(other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdRaftRaiz()).compareTo(other.isSetIdRaftRaiz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdRaftRaiz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idRaftRaiz, other.idRaftRaiz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Node(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft:");
    if (this.ft == null) {
      sb.append("null");
    } else {
      sb.append(this.ft);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pred:");
    if (this.pred == null) {
      sb.append("null");
    } else {
      sb.append(this.pred);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipRaftRaiz:");
    if (this.ipRaftRaiz == null) {
      sb.append("null");
    } else {
      sb.append(this.ipRaftRaiz);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portaRaftRaiz:");
    sb.append(this.portaRaftRaiz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("portaRaft:");
    sb.append(this.portaRaft);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cluster:");
    if (this.cluster == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idRaftRaiz:");
    sb.append(this.idRaftRaiz);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pred != null) {
      pred.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeStandardSchemeFactory implements SchemeFactory {
    public NodeStandardScheme getScheme() {
      return new NodeStandardScheme();
    }
  }

  private static class NodeStandardScheme extends StandardScheme<Node> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Node struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.ft = new ArrayList<List<Finger>>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  List<Finger> _elem12;
                  {
                    org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                    _elem12 = new ArrayList<Finger>(_list13.size);
                    for (int _i14 = 0; _i14 < _list13.size; ++_i14)
                    {
                      Finger _elem15;
                      _elem15 = new Finger();
                      _elem15.read(iprot);
                      _elem12.add(_elem15);
                    }
                    iprot.readListEnd();
                  }
                  struct.ft.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setFtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pred = new Finger();
              struct.pred.read(iprot);
              struct.setPredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP_RAFT_RAIZ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipRaftRaiz = iprot.readString();
              struct.setIpRaftRaizIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PORTA_RAFT_RAIZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.portaRaftRaiz = iprot.readI32();
              struct.setPortaRaftRaizIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PORTA_RAFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.portaRaft = iprot.readI32();
              struct.setPortaRaftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.cluster = new ArrayList<Finger>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Finger _elem18;
                  _elem18 = new Finger();
                  _elem18.read(iprot);
                  struct.cluster.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ID_RAFT_RAIZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idRaftRaiz = iprot.readI32();
              struct.setIdRaftRaizIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Node struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.ft != null) {
        oprot.writeFieldBegin(FT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.ft.size()));
          for (List<Finger> _iter19 : struct.ft)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter19.size()));
              for (Finger _iter20 : _iter19)
              {
                _iter20.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pred != null) {
        oprot.writeFieldBegin(PRED_FIELD_DESC);
        struct.pred.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.ipRaftRaiz != null) {
        oprot.writeFieldBegin(IP_RAFT_RAIZ_FIELD_DESC);
        oprot.writeString(struct.ipRaftRaiz);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORTA_RAFT_RAIZ_FIELD_DESC);
      oprot.writeI32(struct.portaRaftRaiz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORTA_RAFT_FIELD_DESC);
      oprot.writeI32(struct.portaRaft);
      oprot.writeFieldEnd();
      if (struct.cluster != null) {
        oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cluster.size()));
          for (Finger _iter21 : struct.cluster)
          {
            _iter21.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_RAFT_RAIZ_FIELD_DESC);
      oprot.writeI32(struct.idRaftRaiz);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeTupleSchemeFactory implements SchemeFactory {
    public NodeTupleScheme getScheme() {
      return new NodeTupleScheme();
    }
  }

  private static class NodeTupleScheme extends TupleScheme<Node> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFt()) {
        optionals.set(1);
      }
      if (struct.isSetPred()) {
        optionals.set(2);
      }
      if (struct.isSetIp()) {
        optionals.set(3);
      }
      if (struct.isSetPort()) {
        optionals.set(4);
      }
      if (struct.isSetIpRaftRaiz()) {
        optionals.set(5);
      }
      if (struct.isSetPortaRaftRaiz()) {
        optionals.set(6);
      }
      if (struct.isSetPortaRaft()) {
        optionals.set(7);
      }
      if (struct.isSetCluster()) {
        optionals.set(8);
      }
      if (struct.isSetIdRaftRaiz()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFt()) {
        {
          oprot.writeI32(struct.ft.size());
          for (List<Finger> _iter22 : struct.ft)
          {
            {
              oprot.writeI32(_iter22.size());
              for (Finger _iter23 : _iter22)
              {
                _iter23.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetPred()) {
        struct.pred.write(oprot);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetIpRaftRaiz()) {
        oprot.writeString(struct.ipRaftRaiz);
      }
      if (struct.isSetPortaRaftRaiz()) {
        oprot.writeI32(struct.portaRaftRaiz);
      }
      if (struct.isSetPortaRaft()) {
        oprot.writeI32(struct.portaRaft);
      }
      if (struct.isSetCluster()) {
        {
          oprot.writeI32(struct.cluster.size());
          for (Finger _iter24 : struct.cluster)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetIdRaftRaiz()) {
        oprot.writeI32(struct.idRaftRaiz);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Node struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.ft = new ArrayList<List<Finger>>(_list25.size);
          for (int _i26 = 0; _i26 < _list25.size; ++_i26)
          {
            List<Finger> _elem27;
            {
              org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem27 = new ArrayList<Finger>(_list28.size);
              for (int _i29 = 0; _i29 < _list28.size; ++_i29)
              {
                Finger _elem30;
                _elem30 = new Finger();
                _elem30.read(iprot);
                _elem27.add(_elem30);
              }
            }
            struct.ft.add(_elem27);
          }
        }
        struct.setFtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pred = new Finger();
        struct.pred.read(iprot);
        struct.setPredIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipRaftRaiz = iprot.readString();
        struct.setIpRaftRaizIsSet(true);
      }
      if (incoming.get(6)) {
        struct.portaRaftRaiz = iprot.readI32();
        struct.setPortaRaftRaizIsSet(true);
      }
      if (incoming.get(7)) {
        struct.portaRaft = iprot.readI32();
        struct.setPortaRaftIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cluster = new ArrayList<Finger>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            Finger _elem33;
            _elem33 = new Finger();
            _elem33.read(iprot);
            struct.cluster.add(_elem33);
          }
        }
        struct.setClusterIsSet(true);
      }
      if (incoming.get(9)) {
        struct.idRaftRaiz = iprot.readI32();
        struct.setIdRaftRaizIsSet(true);
      }
    }
  }

}

